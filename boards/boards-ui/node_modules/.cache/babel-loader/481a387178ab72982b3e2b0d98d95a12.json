{"ast":null,"code":"import _regeneratorRuntime from\"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{PureComponent}from\"react\";import Button from\"@material-ui/core/Button\";import Dialog from\"@material-ui/core/Dialog\";import DialogActions from\"@material-ui/core/DialogActions\";import DialogContent from\"@material-ui/core/DialogContent\";import DialogTitle from\"@material-ui/core/DialogTitle\";import Slide from\"@material-ui/core/Slide\";import ReactCrop from\"react-image-crop\";import\"react-image-crop/dist/ReactCrop.css\";import{withStyles}from\"@material-ui/styles\";import FormData from\"form-data\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var axios=require('axios');var tokens=localStorage.tokens;//  const handleSubmit = (values) => {\n//     let data = new FormData();\n//     data.append(\"image\", values.file);\n//      // data.append('file[]', values.file, values.file.name,);\n//      // data.append('subject', values.subject);\n//     console.log(\"data\", data)\n//     // console.log(\"values\", values.file.name)\n//     const REST_API_URL = `http://127.0.0.1:8000/api/account/`;\n//     axios.post(REST_API_URL, data, {\n//   headers: {\n//     'accept': 'application/json',\n//     'Accept-Language': 'en-US,en;q=0.8',\n//     'Content-Type': `multipart/form-data`,\n//     'Authorization': `Token ${tokens}`,\n//\n//   }\n// })\n//   .then((response) => {\n//       if (response.status===201) {\n//           alert(\"Success\");\n//             // handleCloseTopic()\n//       }\n//       else {\n//           alert(\"error\");\n//           // handleCloseTopic()\n//           // window.location.reload();\n//         throw new Error('Something went wrong');\n//       }\n//   });\n//   }\n//\n//\n// const Transition = React.forwardRef(function Transition(props, ref) {\n//   return <Slide direction=\"up\" ref={ref} {...props} />;\n// });\n//\n// const styles = {\n//   dialogPaper: {\n//     minHeight: \"80vh\",\n//     maxHeight: \"80vh\"\n//   }\n// };\n//\n// class AlertDialogSlide extends PureComponent {\n//   state = {\n//     open: false,\n//     src: null,\n//     crop: {\n//       unit: \"%\",\n//       width: 30,\n//       aspect: 16 / 9\n//     }\n//   };\n//\n//   handleClickOpen = () => {\n//     this.setState({ open: true });\n//   };\n//\n//   handleClose = () => {\n//     this.setState({ open: false });\n//   };\n//\n//   onSelectFile = e => {\n//     if (e.target.files && e.target.files.length > 0) {\n//       const reader = new FileReader();\n//       reader.addEventListener(\"load\", () =>\n//         this.setState({ src: reader.result })\n//       );\n//       reader.readAsDataURL(e.target.files[0]);\n//     }\n//   };\n//\n//   // If you setState the crop in here you should return false.\n//   onImageLoaded = image => {\n//     this.imageRef = image;\n//   };\n//\n//\n//   handleSubmit = (e) => {\n//     let data = new FormData();\n//     data.append(\"image\", image);\n//      // data.append('file[]', values.file, values.file.name,);\n//      // data.append('subject', values.subject);\n//         console.log(props)\n//\n//     // console.log(values)\n//     console.log(\"data\", data)\n//     // console.log(\"values\", values.file.name)\n//     const REST_API_URL = `http://127.0.0.1:8000/api/account/`;\n//     axios.post(REST_API_URL, data, {\n//   headers: {\n//     'accept': 'application/json',\n//     'Accept-Language': 'en-US,en;q=0.8',\n//     'Content-Type': `multipart/form-data`,\n//     'Authorization': `Token ${tokens}`,\n//\n//   }\n// })\n//   .then((response) => {\n//       if (response.status===201) {\n//           alert(\"Success\");\n//             // handleCloseTopic()\n//       }\n//       else {\n//           alert(\"error\");\n//           // handleCloseTopic()\n//           // window.location.reload();\n//         throw new Error('Something went wrong');\n//       }\n//   });\n//   }\n//   onCropComplete = crop => {\n//     this.makeClientCrop(crop);\n//   };\n//\n//   onCropChange = (crop, percentCrop) => {\n//     // You could also use percentCrop:\n//     // this.setState({ crop: percentCrop });\n//     this.setState({ crop });\n//   };\n//\n//   async makeClientCrop(crop) {\n//     if (this.imageRef && crop.width && crop.height) {\n//       const croppedImageUrl = await this.getCroppedImg(\n//         this.imageRef,\n//         crop,\n//         \"newFile.jpeg\"\n//       );\n//       this.setState({ croppedImageUrl });\n//     }\n//   }\n//\n//   getCroppedImg(image, crop, fileName) {\n//     const canvas = document.createElement(\"canvas\");\n//     const scaleX = image.naturalWidth / image.width;\n//     const scaleY = image.naturalHeight / image.height;\n//     canvas.width = crop.width;\n//     canvas.height = crop.height;\n//     const ctx = canvas.getContext(\"2d\");\n//\n//     ctx.drawImage(\n//       image,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width,\n//       crop.height\n//     );\n//\n//\n//     return new Promise((resolve, reject) => {\n//       canvas.toBlob(blob => {\n//         if (!blob) {\n//           //reject(new Error('Canvas is empty'));\n//           console.error(\"Canvas is empty\");\n//           return;\n//         }\n//         blob.name = fileName;\n//         window.URL.revokeObjectURL(this.fileUrl);\n//         this.fileUrl = window.URL.createObjectURL(blob);\n//         resolve(this.fileUrl);\n//       }, \"image/jpeg\");\n//     });\n//   }\n//\n//\n//\n//   render() {\n//     let fileInput = React.createRef();\n//     const { crop, croppedImageUrl, src } = this.state;\n//     return (\n//       <div>\n//         <Button\n//           variant=\"outlined\"\n//           color=\"primary\"\n//           onClick={this.handleClickOpen}\n//         >\n//           Add Images\n//         </Button>\n//         <Dialog\n//           open={this.state.open}\n//           TransitionComponent={Transition}\n//           keepMounted\n//           onClose={this.TransitionComponenthandleClose}\n//         >\n//\n//           <DialogTitle>{\"Add Images\"}</DialogTitle>\n//           <DialogContent>\n//             <input\n//               type=\"file\"\n//               ref={fileInput}\n//               style={{ display: \"none\" }}\n//               onChange={this.onSelectFile}\n//               multiple\n//             />\n//\n//             {src && (\n//               <ReactCrop\n//                 src={src}\n//                 crop={crop}\n//                 onImageLoaded={this.onImageLoaded}\n//                 onComplete={this.onCropComplete}\n//                 onChange={this.onCropChange}\n//               />\n//             )}\n//             {croppedImageUrl && (\n//               <img\n//                 alt=\"Crop\"\n//                 style={{ maxWidth: \"100%\" }}\n//                 src={croppedImageUrl}\n//               />\n//             )}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={this.handleClose} color=\"primary\">\n//               close\n//             </Button>\n//             <Button onClick={() => fileInput.current.click()}>\n//               {src === null ? \"Upload Photo\" : \"Change Photo\"}\n//             </Button>\n//             {src !== null ? (\n//\n//               //\n//               <Button    onClick={()=> this.handleSubmit()}  >\n//                 Save Photo\n//               </Button>\n//\n//\n//             //\n//\n//\n//             ) : null}\n//           </DialogActions>\n//         </Dialog>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default AlertDialogSlide;\nexport default function AlertDialogSlide(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),upImg=_useState2[0],setUpImg=_useState2[1];var imgRef=useRef(null);var canvasRef=useRef(null);var _useState3=useState({unit:\"%\",width:30,aspect:1/1}),_useState4=_slicedToArray(_useState3,2),crop=_useState4[0],setCrop=_useState4[1];var croppedImage=useRef(null);var onSelectFile=function onSelectFile(e){if(e.target.files&&e.target.files.length>0){var reader=new FileReader();reader.addEventListener(\"load\",function(){return setUpImg(reader.result);});reader.readAsDataURL(e.target.files[0]);}};var onLoad=function onLoad(img){imgRef.current=img;};var onCropComplete=function onCropComplete(crop){makeClientCrop(crop);};var makeClientCrop=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(crop){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(imgRef.current&&crop.width&&crop.height)){_context.next=4;break;}_context.next=3;return getCroppedImg(imgRef.current,crop,\"newFile.jpeg\");case 3:croppedImage.current=_context.sent;case 4:case\"end\":return _context.stop();}}},_callee);}));return function makeClientCrop(_x){return _ref.apply(this,arguments);};}();var getCroppedImg=function getCroppedImg(image,crop,fileName){if(!canvasRef.current||!imgRef.current){return;}var canvas=canvasRef.current;var scaleX=image.naturalWidth/image.width;var scaleY=image.naturalHeight/image.height;var ctx=canvas.getContext(\"2d\");canvas.width=crop.width*pixelRatio;canvas.height=crop.height*pixelRatio;ctx.setTransform(pixelRatio,0,0,pixelRatio,0,0);ctx.imageSmoothingQuality=\"high\";ctx.drawImage(image,crop.x*scaleX,crop.y*scaleY,crop.width*scaleX,crop.height*scaleY,0,0,crop.width,crop.height);return new Promise(function(resolve,reject){canvas.toBlob(function(blob){if(!blob){//reject(new Error('Canvas is empty'));\nconsole.error(\"Canvas is empty\");return;}blob.name=fileName;resolve(blob);},\"image/jpeg\");});};var onSubmit=function onSubmit(e){var formData=new FormData();formData.append(\"profile_pic\",croppedImage.current,croppedImage.current.name);axios.post(\"http://127.0.0.1:8000/api/account/\",formData,{headers:{'accept':'application/json','Accept-Language':'en-US,en;q=0.8','Content-Type':\"multipart/form-data\",'Authorization':\"Token \".concat(tokens)}});};return/*#__PURE__*/_jsx(\"div\",{className:\"imagecropper\",children:/*#__PURE__*/_jsxs(\"form\",{className:classes.form,noValidate:true,onSubmit:handleSubmit(onSubmit),children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"profile-pic\",children:[/*#__PURE__*/_jsx(\"input\",{accept:\"image/*\",id:\"profile-pic\",onChange:onSelectFile,name:\"image\",type:\"file\"}),/*#__PURE__*/_jsx(\"div\",{className:\"profile_pic__edit_main\",children:/*#__PURE__*/_jsx(\"img\",{style:{width:40,height:40},src:upImg,className:\"profile__pic_edit\",alt:\"\"})})]})}),/*#__PURE__*/_jsx(ReactCrop,{src:upImg,onImageLoaded:onLoad,crop:crop,onChange:function onChange(c){return setCrop(c);},onComplete:onCropComplete}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef})}),/*#__PURE__*/_jsx(Button,{type:\"submit\",fullWidth:true,variant:\"contained\",color:\"primary\",className:classes.submit,children:\"Update\"})]})});}","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/src/components/account/Dialog.js"],"names":["React","PureComponent","Button","Dialog","DialogActions","DialogContent","DialogTitle","Slide","ReactCrop","withStyles","FormData","axios","require","tokens","localStorage","AlertDialogSlide","useState","upImg","setUpImg","imgRef","useRef","canvasRef","unit","width","aspect","crop","setCrop","croppedImage","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","onCropComplete","makeClientCrop","height","getCroppedImg","image","fileName","canvas","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","pixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","onSubmit","formData","append","post","headers","classes","form","handleSubmit","c","submit"],"mappings":"mYAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,KAAqC,OAArC,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iCAA1B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iCAA1B,CACA,MAAOC,CAAAA,WAAP,KAAwB,+BAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,yBAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,kBAAtB,CACA,MAAO,qCAAP,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,C,wFAGA,GAAMC,CAAAA,KAAK,CAAGC,OAAO,CAAC,OAAD,CAArB,CAEA,GAAMC,CAAAA,MAAM,CAAGC,YAAY,CAACD,MAA5B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,cAAe,SAASE,CAAAA,gBAAT,EAA4B,CACzC,cAA0BC,QAAQ,EAAlC,wCAAOC,KAAP,eAAcC,QAAd,eACA,GAAMC,CAAAA,MAAM,CAAGC,MAAM,CAAC,IAAD,CAArB,CACA,GAAMC,CAAAA,SAAS,CAAGD,MAAM,CAAC,IAAD,CAAxB,CACA,eAAwBJ,QAAQ,CAAC,CAAEM,IAAI,CAAE,GAAR,CAAaC,KAAK,CAAE,EAApB,CAAwBC,MAAM,CAAE,EAAI,CAApC,CAAD,CAAhC,yCAAOC,IAAP,eAAaC,OAAb,eACA,GAAMC,CAAAA,YAAY,CAAGP,MAAM,CAAC,IAAD,CAA3B,CAEA,GAAMQ,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CAC1B,GAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,EAAkBF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,MAAf,CAAwB,CAA9C,CAAiD,CAC/C,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CACAD,MAAM,CAACE,gBAAP,CAAwB,MAAxB,CAAgC,iBAAMjB,CAAAA,QAAQ,CAACe,MAAM,CAACG,MAAR,CAAd,EAAhC,EACAH,MAAM,CAACI,aAAP,CAAqBR,CAAC,CAACC,MAAF,CAASC,KAAT,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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport { withStyles } from \"@material-ui/styles\";\nimport FormData from \"form-data\";\n\n\nconst axios = require('axios');\n\nconst tokens = localStorage.tokens;\n\n//  const handleSubmit = (values) => {\n//     let data = new FormData();\n//     data.append(\"image\", values.file);\n//      // data.append('file[]', values.file, values.file.name,);\n//      // data.append('subject', values.subject);\n//     console.log(\"data\", data)\n//     // console.log(\"values\", values.file.name)\n//     const REST_API_URL = `http://127.0.0.1:8000/api/account/`;\n//     axios.post(REST_API_URL, data, {\n//   headers: {\n//     'accept': 'application/json',\n//     'Accept-Language': 'en-US,en;q=0.8',\n//     'Content-Type': `multipart/form-data`,\n//     'Authorization': `Token ${tokens}`,\n//\n//   }\n// })\n//   .then((response) => {\n//       if (response.status===201) {\n//           alert(\"Success\");\n//             // handleCloseTopic()\n//       }\n//       else {\n//           alert(\"error\");\n//           // handleCloseTopic()\n//           // window.location.reload();\n//         throw new Error('Something went wrong');\n//       }\n//   });\n//   }\n\n\n\n\n\n\n\n\n//\n//\n// const Transition = React.forwardRef(function Transition(props, ref) {\n//   return <Slide direction=\"up\" ref={ref} {...props} />;\n// });\n//\n// const styles = {\n//   dialogPaper: {\n//     minHeight: \"80vh\",\n//     maxHeight: \"80vh\"\n//   }\n// };\n//\n// class AlertDialogSlide extends PureComponent {\n//   state = {\n//     open: false,\n//     src: null,\n//     crop: {\n//       unit: \"%\",\n//       width: 30,\n//       aspect: 16 / 9\n//     }\n//   };\n//\n//   handleClickOpen = () => {\n//     this.setState({ open: true });\n//   };\n//\n//   handleClose = () => {\n//     this.setState({ open: false });\n//   };\n//\n//   onSelectFile = e => {\n//     if (e.target.files && e.target.files.length > 0) {\n//       const reader = new FileReader();\n//       reader.addEventListener(\"load\", () =>\n//         this.setState({ src: reader.result })\n//       );\n//       reader.readAsDataURL(e.target.files[0]);\n//     }\n//   };\n//\n//   // If you setState the crop in here you should return false.\n//   onImageLoaded = image => {\n//     this.imageRef = image;\n//   };\n//\n//\n//   handleSubmit = (e) => {\n//     let data = new FormData();\n//     data.append(\"image\", image);\n//      // data.append('file[]', values.file, values.file.name,);\n//      // data.append('subject', values.subject);\n//         console.log(props)\n//\n//     // console.log(values)\n//     console.log(\"data\", data)\n//     // console.log(\"values\", values.file.name)\n//     const REST_API_URL = `http://127.0.0.1:8000/api/account/`;\n//     axios.post(REST_API_URL, data, {\n//   headers: {\n//     'accept': 'application/json',\n//     'Accept-Language': 'en-US,en;q=0.8',\n//     'Content-Type': `multipart/form-data`,\n//     'Authorization': `Token ${tokens}`,\n//\n//   }\n// })\n//   .then((response) => {\n//       if (response.status===201) {\n//           alert(\"Success\");\n//             // handleCloseTopic()\n//       }\n//       else {\n//           alert(\"error\");\n//           // handleCloseTopic()\n//           // window.location.reload();\n//         throw new Error('Something went wrong');\n//       }\n//   });\n//   }\n//   onCropComplete = crop => {\n//     this.makeClientCrop(crop);\n//   };\n//\n//   onCropChange = (crop, percentCrop) => {\n//     // You could also use percentCrop:\n//     // this.setState({ crop: percentCrop });\n//     this.setState({ crop });\n//   };\n//\n//   async makeClientCrop(crop) {\n//     if (this.imageRef && crop.width && crop.height) {\n//       const croppedImageUrl = await this.getCroppedImg(\n//         this.imageRef,\n//         crop,\n//         \"newFile.jpeg\"\n//       );\n//       this.setState({ croppedImageUrl });\n//     }\n//   }\n//\n//   getCroppedImg(image, crop, fileName) {\n//     const canvas = document.createElement(\"canvas\");\n//     const scaleX = image.naturalWidth / image.width;\n//     const scaleY = image.naturalHeight / image.height;\n//     canvas.width = crop.width;\n//     canvas.height = crop.height;\n//     const ctx = canvas.getContext(\"2d\");\n//\n//     ctx.drawImage(\n//       image,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width,\n//       crop.height\n//     );\n//\n//\n//     return new Promise((resolve, reject) => {\n//       canvas.toBlob(blob => {\n//         if (!blob) {\n//           //reject(new Error('Canvas is empty'));\n//           console.error(\"Canvas is empty\");\n//           return;\n//         }\n//         blob.name = fileName;\n//         window.URL.revokeObjectURL(this.fileUrl);\n//         this.fileUrl = window.URL.createObjectURL(blob);\n//         resolve(this.fileUrl);\n//       }, \"image/jpeg\");\n//     });\n//   }\n//\n//\n//\n//   render() {\n//     let fileInput = React.createRef();\n//     const { crop, croppedImageUrl, src } = this.state;\n//     return (\n//       <div>\n//         <Button\n//           variant=\"outlined\"\n//           color=\"primary\"\n//           onClick={this.handleClickOpen}\n//         >\n//           Add Images\n//         </Button>\n//         <Dialog\n//           open={this.state.open}\n//           TransitionComponent={Transition}\n//           keepMounted\n//           onClose={this.TransitionComponenthandleClose}\n//         >\n//\n//           <DialogTitle>{\"Add Images\"}</DialogTitle>\n//           <DialogContent>\n//             <input\n//               type=\"file\"\n//               ref={fileInput}\n//               style={{ display: \"none\" }}\n//               onChange={this.onSelectFile}\n//               multiple\n//             />\n//\n//             {src && (\n//               <ReactCrop\n//                 src={src}\n//                 crop={crop}\n//                 onImageLoaded={this.onImageLoaded}\n//                 onComplete={this.onCropComplete}\n//                 onChange={this.onCropChange}\n//               />\n//             )}\n//             {croppedImageUrl && (\n//               <img\n//                 alt=\"Crop\"\n//                 style={{ maxWidth: \"100%\" }}\n//                 src={croppedImageUrl}\n//               />\n//             )}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={this.handleClose} color=\"primary\">\n//               close\n//             </Button>\n//             <Button onClick={() => fileInput.current.click()}>\n//               {src === null ? \"Upload Photo\" : \"Change Photo\"}\n//             </Button>\n//             {src !== null ? (\n//\n//               //\n//               <Button    onClick={()=> this.handleSubmit()}  >\n//                 Save Photo\n//               </Button>\n//\n//\n//             //\n//\n//\n//             ) : null}\n//           </DialogActions>\n//         </Dialog>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default AlertDialogSlide;\n\n\n\nexport default function AlertDialogSlide() {\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [crop, setCrop] = useState({ unit: \"%\", width: 30, aspect: 1 / 1 });\n  const croppedImage = useRef(null);\n\n  const onSelectFile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = (img) => {\n    imgRef.current = img;\n  };\n\n  const onCropComplete = (crop) => {\n    makeClientCrop(crop);\n  };\n\n  const makeClientCrop = async (crop) => {\n    if (imgRef.current && crop.width && crop.height) {\n      croppedImage.current = await getCroppedImg(\n        imgRef.current,\n        crop,\n        \"newFile.jpeg\"\n      );\n    }\n  };\n\n  const getCroppedImg = (image, crop, fileName) => {\n    if (!canvasRef.current || !imgRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob((blob) => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n        blob.name = fileName;\n        resolve(blob);\n      }, \"image/jpeg\");\n    });\n  };\n\n  const onSubmit = (e) => {\n    let formData = new FormData();\n    formData.append(\"profile_pic\", croppedImage.current,\n      croppedImage.current.name);\n\n  axios.post(`http://127.0.0.1:8000/api/account/`, formData, {\n  headers: {\n    'accept': 'application/json',\n    'Accept-Language': 'en-US,en;q=0.8',\n    'Content-Type': `multipart/form-data`,\n    'Authorization': `Token ${tokens}`,\n\n\n  }})}\n\n  return (\n    <div className=\"imagecropper\">\n        <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}>\n        <div>\n          <label htmlFor=\"profile-pic\">\n            <input\n              accept=\"image/*\"\n              id=\"profile-pic\"\n              onChange={onSelectFile}\n              name=\"image\"\n              type=\"file\"\n            />\n            <div className=\"profile_pic__edit_main\">\n              <img\n                style={{ width: 40, height: 40 }}\n                src={upImg}\n                className=\"profile__pic_edit\"\n                alt=\"\"\n              />\n            </div>\n          </label>\n        </div>\n        <ReactCrop\n          src={upImg}\n          onImageLoaded={onLoad}\n          crop={crop}\n          onChange={(c) => setCrop(c)}\n          onComplete={onCropComplete}\n        />\n        <div>\n          <canvas\n            ref={canvasRef}\n          />\n        </div>\n            <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n            >\n                Update\n            </Button>\n    </form>\n    </div>\n  );\n\n}\n"]},"metadata":{},"sourceType":"module"}