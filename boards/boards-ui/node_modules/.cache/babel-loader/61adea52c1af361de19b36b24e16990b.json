{"ast":null,"code":"import _slicedToArray from \"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useMemo } from \"react\";\nimport { logger } from \"@rpldy/shared\";\nimport createUploader from \"@rpldy/uploader\";\nexport default (function (options, listeners) {\n  //avoid creating new instance of uploader (unless enhancer method changed)\n  var uploader = useMemo(function () {\n    logger.debugLog(\"Uploady creating a new uploader instance\", options);\n    return createUploader(options);\n  }, //dont recreate the uploader when options changed - we do update later\n  //eslint-disable-next-line react-hooks/exhaustive-deps\n  [options.enhancer]); //Forgoing any kind of memoization. Probably not worth the comparison work to save on the options merge\n\n  uploader.update(options);\n  useEffect(function () {\n    if (listeners) {\n      logger.debugLog(\"Uploady setting event listeners\", listeners);\n      Object.entries(listeners).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            m = _ref2[1];\n\n        uploader.on(name, m);\n      });\n    }\n\n    return function () {\n      if (listeners) {\n        logger.debugLog(\"Uploady removing event listeners\", listeners);\n        Object.entries(listeners).forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              name = _ref4[0],\n              m = _ref4[1];\n\n          return uploader.off(name, m);\n        });\n      }\n    };\n  }, [listeners, uploader]);\n  return uploader;\n});","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/node_modules/@rpldy/shared-ui/lib/esm/useUploader.js"],"names":["useEffect","useMemo","logger","createUploader","options","listeners","uploader","debugLog","enhancer","update","Object","entries","forEach","name","m","on","off"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,gBAAgB,UAACC,OAAD,EAAUC,SAAV,EAAwB;AACtC;AACA,MAAMC,QAAQ,GAAGL,OAAO,CAAC,YAAM;AAC7BC,IAAAA,MAAM,CAACK,QAAP,CAAgB,0CAAhB,EAA4DH,OAA5D;AACA,WAAOD,cAAc,CAACC,OAAD,CAArB;AACD,GAHuB,EAGrB;AACH;AACA,GAACA,OAAO,CAACI,QAAT,CALwB,CAAxB,CAFsC,CAOjB;;AAErBF,EAAAA,QAAQ,CAACG,MAAT,CAAgBL,OAAhB;AACAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIK,SAAJ,EAAe;AACbH,MAAAA,MAAM,CAACK,QAAP,CAAgB,iCAAhB,EAAmDF,SAAnD;AACAK,MAAAA,MAAM,CAACC,OAAP,CAAeN,SAAf,EAA0BO,OAA1B,CAAkC,gBAAe;AAAA;AAAA,YAAbC,IAAa;AAAA,YAAPC,CAAO;;AAC/CR,QAAAA,QAAQ,CAACS,EAAT,CAAYF,IAAZ,EAAkBC,CAAlB;AACD,OAFD;AAGD;;AAED,WAAO,YAAM;AACX,UAAIT,SAAJ,EAAe;AACbH,QAAAA,MAAM,CAACK,QAAP,CAAgB,kCAAhB,EAAoDF,SAApD;AACAK,QAAAA,MAAM,CAACC,OAAP,CAAeN,SAAf,EAA0BO,OAA1B,CAAkC;AAAA;AAAA,cAAEC,IAAF;AAAA,cAAQC,CAAR;;AAAA,iBAAeR,QAAQ,CAACU,GAAT,CAAaH,IAAb,EAAmBC,CAAnB,CAAf;AAAA,SAAlC;AACD;AACF,KALD;AAMD,GAdQ,EAcN,CAACT,SAAD,EAAYC,QAAZ,CAdM,CAAT;AAeA,SAAOA,QAAP;AACD,CA1BD","sourcesContent":["import { useEffect, useMemo } from \"react\";\nimport { logger } from \"@rpldy/shared\";\nimport createUploader from \"@rpldy/uploader\";\nexport default ((options, listeners) => {\n  //avoid creating new instance of uploader (unless enhancer method changed)\n  const uploader = useMemo(() => {\n    logger.debugLog(\"Uploady creating a new uploader instance\", options);\n    return createUploader(options);\n  }, //dont recreate the uploader when options changed - we do update later\n  //eslint-disable-next-line react-hooks/exhaustive-deps\n  [options.enhancer]); //Forgoing any kind of memoization. Probably not worth the comparison work to save on the options merge\n\n  uploader.update(options);\n  useEffect(() => {\n    if (listeners) {\n      logger.debugLog(\"Uploady setting event listeners\", listeners);\n      Object.entries(listeners).forEach(([name, m]) => {\n        uploader.on(name, m);\n      });\n    }\n\n    return () => {\n      if (listeners) {\n        logger.debugLog(\"Uploady removing event listeners\", listeners);\n        Object.entries(listeners).forEach(([name, m]) => uploader.off(name, m));\n      }\n    };\n  }, [listeners, uploader]);\n  return uploader;\n});"]},"metadata":{},"sourceType":"module"}