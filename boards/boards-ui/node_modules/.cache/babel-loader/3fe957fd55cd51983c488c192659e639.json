{"ast":null,"code":"import { BATCH_STATES, createBatchItem } from \"@rpldy/shared\";\nimport { DEFAULT_FILTER } from \"./defaults\";\nimport { getIsFileList } from \"./utils\";\nvar bCounter = 0;\n\nvar processFiles = function processFiles(batchId, files, isPending, fileFilter) {\n  return Array.prototype //$FlowExpectedError[method-unbinding] flow 0.153 !!!\n  .filter.call(files, fileFilter || DEFAULT_FILTER).map(function (f) {\n    return createBatchItem(f, batchId, isPending);\n  });\n};\n\nexport default (function (files, uploaderId, options) {\n  bCounter += 1;\n  var id = \"batch-\".concat(bCounter);\n  var isFileList = getIsFileList(files);\n  files = Array.isArray(files) || isFileList ? files : [files];\n  var isPending = !options.autoUpload;\n  var items = processFiles(id, files, isPending, options.fileFilter);\n  return {\n    id: id,\n    uploaderId: uploaderId,\n    items: items,\n    state: isPending ? BATCH_STATES.PENDING : BATCH_STATES.ADDED,\n    completed: 0,\n    loaded: 0,\n    orgItemCount: items.length\n  };\n});","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/node_modules/@rpldy/uploader/lib/esm/batch.js"],"names":["BATCH_STATES","createBatchItem","DEFAULT_FILTER","getIsFileList","bCounter","processFiles","batchId","files","isPending","fileFilter","Array","prototype","filter","call","map","f","uploaderId","options","id","isFileList","isArray","autoUpload","items","state","PENDING","ADDED","completed","loaded","orgItemCount","length"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,eAAvB,QAA8C,eAA9C;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,IAAIC,QAAQ,GAAG,CAAf;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAUC,KAAV,EAAiBC,SAAjB,EAA4BC,UAA5B;AAAA,SAA2CC,KAAK,CAACC,SAAN,CAAgB;AAAhB,GAC/DC,MAD+D,CACxDC,IADwD,CACnDN,KADmD,EAC5CE,UAAU,IAAIP,cAD8B,EACdY,GADc,CACV,UAAAC,CAAC;AAAA,WAAId,eAAe,CAACc,CAAD,EAAIT,OAAJ,EAAaE,SAAb,CAAnB;AAAA,GADS,CAA3C;AAAA,CAArB;;AAGA,gBAAgB,UAACD,KAAD,EAAQS,UAAR,EAAoBC,OAApB,EAAgC;AAC9Cb,EAAAA,QAAQ,IAAI,CAAZ;AACA,MAAMc,EAAE,mBAAYd,QAAZ,CAAR;AACA,MAAMe,UAAU,GAAGhB,aAAa,CAACI,KAAD,CAAhC;AACAA,EAAAA,KAAK,GAAGG,KAAK,CAACU,OAAN,CAAcb,KAAd,KAAwBY,UAAxB,GAAqCZ,KAArC,GAA6C,CAACA,KAAD,CAArD;AACA,MAAMC,SAAS,GAAG,CAACS,OAAO,CAACI,UAA3B;AACA,MAAMC,KAAK,GAAGjB,YAAY,CAACa,EAAD,EAAKX,KAAL,EAAYC,SAAZ,EAAuBS,OAAO,CAACR,UAA/B,CAA1B;AACA,SAAO;AACLS,IAAAA,EAAE,EAAFA,EADK;AAELF,IAAAA,UAAU,EAAVA,UAFK;AAGLM,IAAAA,KAAK,EAALA,KAHK;AAILC,IAAAA,KAAK,EAAEf,SAAS,GAAGR,YAAY,CAACwB,OAAhB,GAA0BxB,YAAY,CAACyB,KAJlD;AAKLC,IAAAA,SAAS,EAAE,CALN;AAMLC,IAAAA,MAAM,EAAE,CANH;AAOLC,IAAAA,YAAY,EAAEN,KAAK,CAACO;AAPf,GAAP;AASD,CAhBD","sourcesContent":["import { BATCH_STATES, createBatchItem } from \"@rpldy/shared\";\nimport { DEFAULT_FILTER } from \"./defaults\";\nimport { getIsFileList } from \"./utils\";\nlet bCounter = 0;\n\nconst processFiles = (batchId, files, isPending, fileFilter) => Array.prototype //$FlowExpectedError[method-unbinding] flow 0.153 !!!\n.filter.call(files, fileFilter || DEFAULT_FILTER).map(f => createBatchItem(f, batchId, isPending));\n\nexport default ((files, uploaderId, options) => {\n  bCounter += 1;\n  const id = `batch-${bCounter}`;\n  const isFileList = getIsFileList(files);\n  files = Array.isArray(files) || isFileList ? files : [files];\n  const isPending = !options.autoUpload;\n  const items = processFiles(id, files, isPending, options.fileFilter);\n  return {\n    id,\n    uploaderId,\n    items,\n    state: isPending ? BATCH_STATES.PENDING : BATCH_STATES.ADDED,\n    completed: 0,\n    loaded: 0,\n    orgItemCount: items.length\n  };\n});"]},"metadata":{},"sourceType":"module"}