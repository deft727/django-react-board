{"ast":null,"code":"import _objectSpread from \"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { UPLOADER_EVENTS } from \"@rpldy/uploader\";\nimport { generateUploaderEventHook, generateUploaderEventHookWithState } from \"./utils\";\nvar useBatchAddListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ADD, false);\nvar useBatchStartListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_START);\nvar useBatchFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_FINISH);\nvar useBatchCancelledListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_CANCEL);\nvar useBatchAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ABORT);\nvar useBatchProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.BATCH_PROGRESS, function (batch) {\n  return _objectSpread({}, batch);\n});\nvar useItemStartListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_START);\nvar useItemFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINISH);\nvar useItemCancelListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_CANCEL);\nvar useItemErrorListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ERROR);\nvar useItemAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ABORT);\nvar useItemFinalizeListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINALIZE);\nvar useItemProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.ITEM_PROGRESS, function (item) {\n  return _objectSpread({}, item);\n});\nvar useRequestPreSend = generateUploaderEventHook(UPLOADER_EVENTS.REQUEST_PRE_SEND, false);\nvar useAllAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ALL_ABORT, false);\nexport { useBatchAddListener, useBatchStartListener, useBatchFinishListener, useBatchCancelledListener, useBatchAbortListener, useBatchProgressListener, useItemStartListener, useItemFinishListener, useItemProgressListener, useItemCancelListener, useItemErrorListener, useItemAbortListener, useItemFinalizeListener, useRequestPreSend, useAllAbortListener };","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/node_modules/@rpldy/shared-ui/lib/esm/eventListenerHooks.js"],"names":["UPLOADER_EVENTS","generateUploaderEventHook","generateUploaderEventHookWithState","useBatchAddListener","BATCH_ADD","useBatchStartListener","BATCH_START","useBatchFinishListener","BATCH_FINISH","useBatchCancelledListener","BATCH_CANCEL","useBatchAbortListener","BATCH_ABORT","useBatchProgressListener","BATCH_PROGRESS","batch","useItemStartListener","ITEM_START","useItemFinishListener","ITEM_FINISH","useItemCancelListener","ITEM_CANCEL","useItemErrorListener","ITEM_ERROR","useItemAbortListener","ITEM_ABORT","useItemFinalizeListener","ITEM_FINALIZE","useItemProgressListener","ITEM_PROGRESS","item","useRequestPreSend","REQUEST_PRE_SEND","useAllAbortListener","ALL_ABORT"],"mappings":";AAAA,SAASA,eAAT,QAAgC,iBAAhC;AACA,SAASC,yBAAT,EAAoCC,kCAApC,QAA8E,SAA9E;AACA,IAAMC,mBAAmB,GAAGF,yBAAyB,CAACD,eAAe,CAACI,SAAjB,EAA4B,KAA5B,CAArD;AACA,IAAMC,qBAAqB,GAAGJ,yBAAyB,CAACD,eAAe,CAACM,WAAjB,CAAvD;AACA,IAAMC,sBAAsB,GAAGN,yBAAyB,CAACD,eAAe,CAACQ,YAAjB,CAAxD;AACA,IAAMC,yBAAyB,GAAGR,yBAAyB,CAACD,eAAe,CAACU,YAAjB,CAA3D;AACA,IAAMC,qBAAqB,GAAGV,yBAAyB,CAACD,eAAe,CAACY,WAAjB,CAAvD;AACA,IAAMC,wBAAwB,GAAGX,kCAAkC,CAACF,eAAe,CAACc,cAAjB,EAAiC,UAAAC,KAAK;AAAA,2BAAUA,KAAV;AAAA,CAAtC,CAAnE;AAEA,IAAMC,oBAAoB,GAAGf,yBAAyB,CAACD,eAAe,CAACiB,UAAjB,CAAtD;AACA,IAAMC,qBAAqB,GAAGjB,yBAAyB,CAACD,eAAe,CAACmB,WAAjB,CAAvD;AACA,IAAMC,qBAAqB,GAAGnB,yBAAyB,CAACD,eAAe,CAACqB,WAAjB,CAAvD;AACA,IAAMC,oBAAoB,GAAGrB,yBAAyB,CAACD,eAAe,CAACuB,UAAjB,CAAtD;AACA,IAAMC,oBAAoB,GAAGvB,yBAAyB,CAACD,eAAe,CAACyB,UAAjB,CAAtD;AACA,IAAMC,uBAAuB,GAAGzB,yBAAyB,CAACD,eAAe,CAAC2B,aAAjB,CAAzD;AACA,IAAMC,uBAAuB,GAAG1B,kCAAkC,CAACF,eAAe,CAAC6B,aAAjB,EAAgC,UAAAC,IAAI;AAAA,2BAAUA,IAAV;AAAA,CAApC,CAAlE;AAEA,IAAMC,iBAAiB,GAAG9B,yBAAyB,CAACD,eAAe,CAACgC,gBAAjB,EAAmC,KAAnC,CAAnD;AACA,IAAMC,mBAAmB,GAAGhC,yBAAyB,CAACD,eAAe,CAACkC,SAAjB,EAA4B,KAA5B,CAArD;AACA,SAAS/B,mBAAT,EAA8BE,qBAA9B,EAAqDE,sBAArD,EAA6EE,yBAA7E,EAAwGE,qBAAxG,EAA+HE,wBAA/H,EAAyJG,oBAAzJ,EAA+KE,qBAA/K,EAAsMU,uBAAtM,EAA+NR,qBAA/N,EAAsPE,oBAAtP,EAA4QE,oBAA5Q,EAAkSE,uBAAlS,EAA2TK,iBAA3T,EAA8UE,mBAA9U","sourcesContent":["import { UPLOADER_EVENTS } from \"@rpldy/uploader\";\nimport { generateUploaderEventHook, generateUploaderEventHookWithState } from \"./utils\";\nconst useBatchAddListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ADD, false);\nconst useBatchStartListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_START);\nconst useBatchFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_FINISH);\nconst useBatchCancelledListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_CANCEL);\nconst useBatchAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ABORT);\nconst useBatchProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.BATCH_PROGRESS, batch => ({ ...batch\n}));\nconst useItemStartListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_START);\nconst useItemFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINISH);\nconst useItemCancelListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_CANCEL);\nconst useItemErrorListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ERROR);\nconst useItemAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ABORT);\nconst useItemFinalizeListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINALIZE);\nconst useItemProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.ITEM_PROGRESS, item => ({ ...item\n}));\nconst useRequestPreSend = generateUploaderEventHook(UPLOADER_EVENTS.REQUEST_PRE_SEND, false);\nconst useAllAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ALL_ABORT, false);\nexport { useBatchAddListener, useBatchStartListener, useBatchFinishListener, useBatchCancelledListener, useBatchAbortListener, useBatchProgressListener, useItemStartListener, useItemFinishListener, useItemProgressListener, useItemCancelListener, useItemErrorListener, useItemAbortListener, useItemFinalizeListener, useRequestPreSend, useAllAbortListener };"]},"metadata":{},"sourceType":"module"}