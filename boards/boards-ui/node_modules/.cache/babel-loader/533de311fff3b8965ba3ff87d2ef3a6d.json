{"ast":null,"code":"import _slicedToArray from \"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isFunction } from \"@rpldy/shared\";\n/**\n * mimics FormData.set() when its not available (react-native)\n * in case FormData.delete() isnt available, will append only (unlike set)\n */\n\nvar addToFormData = function addToFormData(fd, name) {\n  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n\n  //rest = [value, fileName = undefined]\n  if (\"set\" in fd) {\n    // $FlowFixMe - ignore flow for not allowing FileLike here\n    fd.set.apply(fd, [name].concat(rest));\n  } else {\n    if (\"delete\" in fd) {\n      fd.delete(name);\n    } // $FlowFixMe - ignore flow for not allowing FileLike here\n\n\n    fd.append.apply(fd, [name].concat(rest));\n  }\n};\n\nvar getFormFileField = function getFormFileField(fd, items, options) {\n  var single = items.length === 1;\n  items.forEach(function (item, i) {\n    var name = single ? options.paramName : isFunction(options.formatGroupParamName) ? options.formatGroupParamName(i, options.paramName) : \"\".concat(options.paramName, \"[\").concat(i, \"]\");\n\n    if (item.file) {\n      addToFormData(fd, name, item.file, item.file.name);\n    } else if (item.url) {\n      addToFormData(fd, name, item.url);\n    }\n  });\n};\n\nvar prepareFormData = function prepareFormData(items, options) {\n  var fd = new FormData();\n\n  if (options.params) {\n    Object.entries(options.params).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n\n      return addToFormData(fd, key, val);\n    });\n  }\n\n  getFormFileField(fd, items, options);\n  return fd;\n};\n\nexport default prepareFormData;","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/node_modules/@rpldy/sender/lib/esm/xhrSender/prepareFormData.js"],"names":["isFunction","addToFormData","fd","name","rest","set","delete","append","getFormFileField","items","options","single","length","forEach","item","i","paramName","formatGroupParamName","file","url","prepareFormData","FormData","params","Object","entries","key","val"],"mappings":";AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA;AACA;AACA;AACA;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAKC,IAAL,EAAuB;AAAA,oCAATC,IAAS;AAATA,IAAAA,IAAS;AAAA;;AAC3C;AACA,MAAI,SAASF,EAAb,EAAiB;AACf;AACAA,IAAAA,EAAE,CAACG,GAAH,OAAAH,EAAE,GAAKC,IAAL,SAAcC,IAAd,EAAF;AACD,GAHD,MAGO;AACL,QAAI,YAAYF,EAAhB,EAAoB;AAClBA,MAAAA,EAAE,CAACI,MAAH,CAAUH,IAAV;AACD,KAHI,CAGH;;;AAGFD,IAAAA,EAAE,CAACK,MAAH,OAAAL,EAAE,GAAQC,IAAR,SAAiBC,IAAjB,EAAF;AACD;AACF,CAbD;;AAeA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACN,EAAD,EAAKO,KAAL,EAAYC,OAAZ,EAAwB;AAC/C,MAAMC,MAAM,GAAGF,KAAK,CAACG,MAAN,KAAiB,CAAhC;AACAH,EAAAA,KAAK,CAACI,OAAN,CAAc,UAACC,IAAD,EAAOC,CAAP,EAAa;AACzB,QAAMZ,IAAI,GAAGQ,MAAM,GAAGD,OAAO,CAACM,SAAX,GAAuBhB,UAAU,CAACU,OAAO,CAACO,oBAAT,CAAV,GAA2CP,OAAO,CAACO,oBAAR,CAA6BF,CAA7B,EAAgCL,OAAO,CAACM,SAAxC,CAA3C,aAAmGN,OAAO,CAACM,SAA3G,cAAwHD,CAAxH,MAA1C;;AAEA,QAAID,IAAI,CAACI,IAAT,EAAe;AACbjB,MAAAA,aAAa,CAACC,EAAD,EAAKC,IAAL,EAAWW,IAAI,CAACI,IAAhB,EAAsBJ,IAAI,CAACI,IAAL,CAAUf,IAAhC,CAAb;AACD,KAFD,MAEO,IAAIW,IAAI,CAACK,GAAT,EAAc;AACnBlB,MAAAA,aAAa,CAACC,EAAD,EAAKC,IAAL,EAAWW,IAAI,CAACK,GAAhB,CAAb;AACD;AACF,GARD;AASD,CAXD;;AAaA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACX,KAAD,EAAQC,OAAR,EAAoB;AAC1C,MAAMR,EAAE,GAAG,IAAImB,QAAJ,EAAX;;AAEA,MAAIX,OAAO,CAACY,MAAZ,EAAoB;AAClBC,IAAAA,MAAM,CAACC,OAAP,CAAed,OAAO,CAACY,MAAvB,EAA+BT,OAA/B,CAAuC;AAAA;AAAA,UAAEY,GAAF;AAAA,UAAOC,GAAP;;AAAA,aAAgBzB,aAAa,CAACC,EAAD,EAAKuB,GAAL,EAAUC,GAAV,CAA7B;AAAA,KAAvC;AACD;;AAEDlB,EAAAA,gBAAgB,CAACN,EAAD,EAAKO,KAAL,EAAYC,OAAZ,CAAhB;AACA,SAAOR,EAAP;AACD,CATD;;AAWA,eAAekB,eAAf","sourcesContent":["import { isFunction } from \"@rpldy/shared\";\n\n/**\n * mimics FormData.set() when its not available (react-native)\n * in case FormData.delete() isnt available, will append only (unlike set)\n */\nconst addToFormData = (fd, name, ...rest) => {\n  //rest = [value, fileName = undefined]\n  if (\"set\" in fd) {\n    // $FlowFixMe - ignore flow for not allowing FileLike here\n    fd.set(name, ...rest);\n  } else {\n    if (\"delete\" in fd) {\n      fd.delete(name);\n    } // $FlowFixMe - ignore flow for not allowing FileLike here\n\n\n    fd.append(name, ...rest);\n  }\n};\n\nconst getFormFileField = (fd, items, options) => {\n  const single = items.length === 1;\n  items.forEach((item, i) => {\n    const name = single ? options.paramName : isFunction(options.formatGroupParamName) ? options.formatGroupParamName(i, options.paramName) : `${options.paramName}[${i}]`;\n\n    if (item.file) {\n      addToFormData(fd, name, item.file, item.file.name);\n    } else if (item.url) {\n      addToFormData(fd, name, item.url);\n    }\n  });\n};\n\nconst prepareFormData = (items, options) => {\n  const fd = new FormData();\n\n  if (options.params) {\n    Object.entries(options.params).forEach(([key, val]) => addToFormData(fd, key, val));\n  }\n\n  getFormFileField(fd, items, options);\n  return fd;\n};\n\nexport default prepareFormData;"]},"metadata":{},"sourceType":"module"}