{"ast":null,"code":"import _slicedToArray from\"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{PureComponent}from\"react\";import Button from\"@material-ui/core/Button\";import Dialog from\"@material-ui/core/Dialog\";import DialogActions from\"@material-ui/core/DialogActions\";import DialogContent from\"@material-ui/core/DialogContent\";import DialogTitle from\"@material-ui/core/DialogTitle\";import Slide from\"@material-ui/core/Slide\";import ReactCrop from\"react-image-crop\";import\"react-image-crop/dist/ReactCrop.css\";import{withStyles}from\"@material-ui/styles\";import FormData from\"form-data\";import{Avatar,Grid,IconButton}from\"@material-ui/core\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var axios=require('axios');var tokens=localStorage.tokens;//  const handleSubmit = (values) => {\n//     let data = new FormData();\n//     data.append(\"image\", values.file);\n//      // data.append('file[]', values.file, values.file.name,);\n//      // data.append('subject', values.subject);\n//     console.log(\"data\", data)\n//     // console.log(\"values\", values.file.name)\n//     const REST_API_URL = `http://127.0.0.1:8000/api/account/`;\n//     axios.post(REST_API_URL, data, {\n//   headers: {\n//     'accept': 'application/json',\n//     'Accept-Language': 'en-US,en;q=0.8',\n//     'Content-Type': `multipart/form-data`,\n//     'Authorization': `Token ${tokens}`,\n//\n//   }\n// })\n//   .then((response) => {\n//       if (response.status===201) {\n//           alert(\"Success\");\n//             // handleCloseTopic()\n//       }\n//       else {\n//           alert(\"error\");\n//           // handleCloseTopic()\n//           // window.location.reload();\n//         throw new Error('Something went wrong');\n//       }\n//   });\n//   }\n//\n//\n//\n// const Transition = React.forwardRef(function Transition(props, ref) {\n//   return <Slide direction=\"up\" ref={ref} {...props} />;\n// });\n//\n// const styles = {\n//   dialogPaper: {\n//     minHeight: \"80vh\",\n//     maxHeight: \"80vh\"\n//   }\n// };\n//\n// class AlertDialogSlide extends PureComponent {\n//   state = {\n//     open: false,\n//     src: null,\n//     crop: {\n//       unit: \"%\",\n//       width: 30,\n//       aspect: 16 / 9\n//     }\n//   };\n//\n//   handleClickOpen = () => {\n//     this.setState({ open: true });\n//   };\n//\n//   handleClose = () => {\n//     this.setState({ open: false });\n//   };\n//\n//   onSelectFile = e => {\n//     if (e.target.files && e.target.files.length > 0) {\n//       const reader = new FileReader();\n//       reader.addEventListener(\"load\", () =>\n//         this.setState({ src: reader.result })\n//       );\n//       reader.readAsDataURL(e.target.files[0]);\n//     }\n//   };\n//\n//   // If you setState the crop in here you should return false.\n//   onImageLoaded = image => {\n//     this.imageRef = image;\n//   };\n//\n//\n//   handleSubmit = (values) => {\n//     let data = new FormData();\n//     data.append(\"image\", values.file);\n//      // data.append('file[]', values.file, values.file.name,);\n//      // data.append('subject', values.subject);\n//         console.log(props)\n//\n//     // console.log(values)\n//     console.log(\"data\", data)\n//     // console.log(\"values\", values.file.name)\n//     const REST_API_URL = `http://127.0.0.1:8000/api/account/`;\n//     axios.post(REST_API_URL, data, {\n//   headers: {\n//     'accept': 'application/json',\n//     'Accept-Language': 'en-US,en;q=0.8',\n//     'Content-Type': `multipart/form-data`,\n//     'Authorization': `Token ${tokens}`,\n//\n//   }\n// })\n//   .then((response) => {\n//       if (response.status===201) {\n//           alert(\"Success\");\n//             // handleCloseTopic()\n//       }\n//       else {\n//           alert(\"error\");\n//           // handleCloseTopic()\n//           // window.location.reload();\n//         throw new Error('Something went wrong');\n//       }\n//   });\n//   }\n//   onCropComplete = crop => {\n//     this.makeClientCrop(crop);\n//   };\n//\n//   onCropChange = (crop, percentCrop) => {\n//     // You could also use percentCrop:\n//     // this.setState({ crop: percentCrop });\n//     this.setState({ crop });\n//   };\n//\n//   async makeClientCrop(crop) {\n//     if (this.imageRef && crop.width && crop.height) {\n//       const croppedImageUrl = await this.getCroppedImg(\n//         this.imageRef,\n//         crop,\n//         \"newFile.jpeg\"\n//       );\n//       this.setState({ croppedImageUrl });\n//     }\n//   }\n//\n//   getCroppedImg(image, crop, fileName) {\n//     const canvas = document.createElement(\"canvas\");\n//     const scaleX = image.naturalWidth / image.width;\n//     const scaleY = image.naturalHeight / image.height;\n//     canvas.width = crop.width;\n//     canvas.height = crop.height;\n//     const ctx = canvas.getContext(\"2d\");\n//\n//     ctx.drawImage(\n//       image,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width,\n//       crop.height\n//     );\n//\n//\n//     return new Promise((resolve, reject) => {\n//       canvas.toBlob(blob => {\n//         if (!blob) {\n//           //reject(new Error('Canvas is empty'));\n//           console.error(\"Canvas is empty\");\n//           return;\n//         }\n//         blob.name = fileName;\n//         window.URL.revokeObjectURL(this.fileUrl);\n//         this.fileUrl = window.URL.createObjectURL(blob);\n//         resolve(this.fileUrl);\n//       }, \"image/jpeg\");\n//     });\n//   }\n//\n//\n//\n//   render() {\n//     let fileInput = React.createRef();\n//     const { crop, croppedImageUrl, src } = this.state;\n//     return (\n//       <div>\n//         <Button\n//           variant=\"outlined\"\n//           color=\"primary\"\n//           onClick={this.handleClickOpen}\n//         >\n//           Add Images\n//         </Button>\n//         <Dialog\n//           open={this.state.open}\n//           TransitionComponent={Transition}\n//           keepMounted\n//           onClose={this.TransitionComponenthandleClose}\n//         >\n//\n//           <DialogTitle>{\"Add Images\"}</DialogTitle>\n//           <DialogContent>\n//             <input\n//               type=\"file\"\n//               ref={fileInput}\n//               style={{ display: \"none\" }}\n//               onChange={this.onSelectFile}\n//               multiple\n//             />\n//\n//             {src && (\n//               <ReactCrop\n//                 src={src}\n//                 crop={crop}\n//                 onImageLoaded={this.onImageLoaded}\n//                 onComplete={this.onCropComplete}\n//                 onChange={this.onCropChange}\n//               />\n//             )}\n//             {croppedImageUrl && (\n//               <img\n//                 alt=\"Crop\"\n//                 style={{ maxWidth: \"100%\" }}\n//                 src={croppedImageUrl}\n//               />\n//             )}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={this.handleClose} color=\"primary\">\n//               close\n//             </Button>\n//             <Button onClick={() => fileInput.current.click()}>\n//               {src === null ? \"Upload Photo\" : \"Change Photo\"}\n//             </Button>\n//             {src !== null ? (\n//\n//               //\n//               <Button    onClick={()=> this.handleSubmit()}  >\n//                 Save Photo\n//               </Button>\n//\n//\n//             //\n//\n//             ) : null}\n//           </DialogActions>\n//         </Dialog>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default AlertDialogSlide;\nfunction getResizedCanvas(canvas,newWidth,newHeight){var tmpCanvas=document.createElement(\"canvas\");tmpCanvas.width=newWidth;tmpCanvas.height=newHeight;var ctx=tmpCanvas.getContext(\"2d\");ctx.drawImage(canvas,0,0,canvas.width,canvas.height,0,0,newWidth,newHeight);return tmpCanvas;}function PhotoCamera(props){return null;}export default function ProfilePicEdit(){var _useStateValue=useStateValue(),_useStateValue2=_slicedToArray(_useStateValue,2),user=_useStateValue2[0].user,dispatch=_useStateValue2[1];var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit;var _useState=useState(),_useState2=_slicedToArray(_useState,2),upImg=_useState2[0],setUpImg=_useState2[1];// const [image, setImage] = useState(null);\nvar imgRef=useRef(null);var previewCanvasRef=useRef(null);var _useState3=useState({unit:\"%\",width:30,aspect:1/1}),_useState4=_slicedToArray(_useState3,2),crop=_useState4[0],setCrop=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),completedCrop=_useState6[0],setCompletedCrop=_useState6[1];var classes=useStyles();var onSelectFile=function onSelectFile(e){if(e.target.files&&e.target.files.length>0){var reader=new FileReader();reader.addEventListener(\"load\",function(){return setUpImg(reader.result);});reader.readAsDataURL(e.target.files[0]);// setImage(\n//   {image: e.target.files[0]}\n//   )\n}};var onLoad=useCallback(function(img){imgRef.current=img;},[]);useEffect(function(){if(!completedCrop||!previewCanvasRef.current||!imgRef.current){return;}var image=imgRef.current;var canvas=previewCanvasRef.current;var crop=completedCrop;var scaleX=image.naturalWidth/image.width;var scaleY=image.naturalHeight/image.height;var ctx=canvas.getContext(\"2d\");canvas.width=crop.width*pixelRatio;canvas.height=crop.height*pixelRatio;ctx.setTransform(pixelRatio,0,0,pixelRatio,0,0);ctx.imageSmoothingQuality=\"high\";ctx.drawImage(image,crop.x*scaleX,crop.y*scaleY,crop.width*scaleX,crop.height*scaleY,0,0,crop.width,crop.height);var reader=new FileReader();canvas.toBlob(function(blob){reader.readAsDataURL(blob);reader.onloadend=function(){dataURLtoFile(reader.result,\"sample.jpg\");};});var dataURLtoFile=function dataURLtoFile(dataurl,filename){var arr=dataurl.split(','),mime=arr[0].match(/:(.*?);/)[1],bstr=atob(arr[1]),n=bstr.length,u8arr=new Uint8Array(n);while(n--){u8arr[n]=bstr.charCodeAt(n);}var croppedImage=new File([u8arr],filename,{type:mime});setUpImg({upImg:croppedImage});};},[completedCrop]);var onSubmit=function onSubmit(){var formData=new FormData();// console.log(upImg)\nformData.append('profile_pic',upImg);axiosInstance.put('api/profile/update/',formData);// window.location.reload();\n};return/*#__PURE__*/_jsx(\"div\",{className:\"imagecropper\",children:/*#__PURE__*/_jsxs(\"form\",{className:classes.form,noValidate:true,onSubmit:handleSubmit(onSubmit),children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"profile-pic\",children:[/*#__PURE__*/_jsx(\"input\",{accept:\"image/*\",className:classes.input,id:\"profile-pic\",onChange:onSelectFile,name:\"image\",type:\"file\",ref:register}),\"                  \",console.log(upImg),/*#__PURE__*/_jsxs(\"div\",{className:\"profile_pic__edit_main\",children:[upImg===undefined?/*#__PURE__*/_jsx(Avatar,{src:user&&user.profile_pic,alt:user&&user.username,className:\"profile__pic_edit\"}):/*#__PURE__*/_jsx(Avatar,{src:upImg,className:\"profile__pic_edit\",alt:\"\"}),/*#__PURE__*/_jsx(\"div\",{className:\"profile_pic__edit_icon\",children:/*#__PURE__*/_jsx(IconButton,{color:\"primary\",component:\"span\",children:/*#__PURE__*/_jsx(PhotoCamera,{fontSize:\"large\"})})})]})]})}),/*#__PURE__*/_jsx(ReactCrop,{src:upImg,onImageLoaded:onLoad,crop:crop,onChange:function onChange(c){return setCrop(c);},onComplete:function onComplete(c){return setCompletedCrop(c);}}),/*#__PURE__*/_jsx(Button,{type:\"submit\",fullWidth:true,variant:\"contained\",color:\"primary\",className:classes.submit,children:\"Update\"})]})});}","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/src/components/account/Dialog.js"],"names":["React","PureComponent","Button","Dialog","DialogActions","DialogContent","DialogTitle","Slide","ReactCrop","withStyles","FormData","Avatar","Grid","IconButton","axios","require","tokens","localStorage","getResizedCanvas","canvas","newWidth","newHeight","tmpCanvas","document","createElement","width","height","ctx","getContext","drawImage","PhotoCamera","props","ProfilePicEdit","useStateValue","user","dispatch","useForm","register","handleSubmit","useState","upImg","setUpImg","imgRef","useRef","previewCanvasRef","unit","aspect","crop","setCrop","completedCrop","setCompletedCrop","classes","useStyles","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","useCallback","img","current","useEffect","image","scaleX","naturalWidth","scaleY","naturalHeight","pixelRatio","setTransform","imageSmoothingQuality","x","y","toBlob","blob","onloadend","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","croppedImage","File","type","onSubmit","formData","append","axiosInstance","put","form","input","console","log","undefined","profile_pic","username","c","submit"],"mappings":"kIAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,KAAqC,OAArC,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iCAA1B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iCAA1B,CACA,MAAOC,CAAAA,WAAP,KAAwB,+BAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,yBAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,kBAAtB,CACA,MAAO,qCAAP,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,OAAQC,MAAR,CAAgBC,IAAhB,CAAsBC,UAAtB,KAAuC,mBAAvC,C,wFAGA,GAAMC,CAAAA,KAAK,CAAGC,OAAO,CAAC,OAAD,CAArB,CAEA,GAAMC,CAAAA,MAAM,CAAGC,YAAY,CAACD,MAA5B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,QAASE,CAAAA,gBAAT,CAA0BC,MAA1B,CAAkCC,QAAlC,CAA4CC,SAA5C,CAAuD,CACrD,GAAMC,CAAAA,SAAS,CAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAlB,CACAF,SAAS,CAACG,KAAV,CAAkBL,QAAlB,CACAE,SAAS,CAACI,MAAV,CAAmBL,SAAnB,CAEA,GAAMM,CAAAA,GAAG,CAAGL,SAAS,CAACM,UAAV,CAAqB,IAArB,CAAZ,CACAD,GAAG,CAACE,SAAJ,CACEV,MADF,CAEE,CAFF,CAGE,CAHF,CAIEA,MAAM,CAACM,KAJT,CAKEN,MAAM,CAACO,MALT,CAME,CANF,CAOE,CAPF,CAQEN,QARF,CASEC,SATF,EAYA,MAAOC,CAAAA,SAAP,CACD,CAGD,QAASQ,CAAAA,WAAT,CAAqBC,KAArB,CAAkD,CAChD,MAAO,KAAP,CACD,CAED,cAAe,SAASC,CAAAA,cAAT,EAA0B,CAErC,mBAA2BC,aAAa,EAAxC,kDAAQC,IAAR,oBAAQA,IAAR,CAAeC,QAAf,oBAEA,aAAmCC,OAAO,EAA1C,CAAQC,QAAR,UAAQA,QAAR,CAAkBC,YAAlB,UAAkBA,YAAlB,CAEA,cAA0BC,QAAQ,EAAlC,wCAAOC,KAAP,eAAcC,QAAd,eACA;AACA,GAAMC,CAAAA,MAAM,CAAGC,MAAM,CAAC,IAAD,CAArB,CACA,GAAMC,CAAAA,gBAAgB,CAAGD,MAAM,CAAC,IAAD,CAA/B,CACA,eAAwBJ,QAAQ,CAAC,CAAEM,IAAI,CAAE,GAAR,CAAapB,KAAK,CAAE,EAApB,CAAwBqB,MAAM,CAAE,EAAI,CAApC,CAAD,CAAhC,yCAAOC,IAAP,eAAaC,OAAb,eACA,eAA0CT,QAAQ,CAAC,IAAD,CAAlD,yCAAOU,aAAP,eAAsBC,gBAAtB,eAEA,GAAMC,CAAAA,OAAO,CAAGC,SAAS,EAAzB,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CACxB,GAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,EAAkBF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,MAAf,CAAwB,CAA9C,CAAiD,CACjD,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CACAD,MAAM,CAACE,gBAAP,CAAwB,MAAxB,CAAgC,iBAAMnB,CAAAA,QAAQ,CAACiB,MAAM,CAACG,MAAR,CAAd,EAAhC,EACAH,MAAM,CAACI,aAAP,CAAqBR,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB,EACA;AACA;AACA;AACC,CACJ,CATD,CAWA,GAAMO,CAAAA,MAAM,CAAGC,WAAW,CAAC,SAACC,GAAD,CAAS,CAChCvB,MAAM,CAACwB,OAAP,CAAiBD,GAAjB,CACH,CAFyB,CAEvB,EAFuB,CAA1B,CAIAE,SAAS,CAAC,UAAM,CACZ,GAAI,CAAClB,aAAD,EAAkB,CAACL,gBAAgB,CAACsB,OAApC,EAA+C,CAACxB,MAAM,CAACwB,OAA3D,CAAoE,CACpE,OACC,CAED,GAAME,CAAAA,KAAK,CAAG1B,MAAM,CAACwB,OAArB,CACA,GAAM/C,CAAAA,MAAM,CAAGyB,gBAAgB,CAACsB,OAAhC,CACA,GAAMnB,CAAAA,IAAI,CAAGE,aAAb,CAEA,GAAMoB,CAAAA,MAAM,CAAGD,KAAK,CAACE,YAAN,CAAqBF,KAAK,CAAC3C,KAA1C,CACA,GAAM8C,CAAAA,MAAM,CAAGH,KAAK,CAACI,aAAN,CAAsBJ,KAAK,CAAC1C,MAA3C,CACA,GAAMC,CAAAA,GAAG,CAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAZ,CAEAT,MAAM,CAACM,KAAP,CAAesB,IAAI,CAACtB,KAAL,CAAagD,UAA5B,CACAtD,MAAM,CAACO,MAAP,CAAgBqB,IAAI,CAACrB,MAAL,CAAc+C,UAA9B,CAEA9C,GAAG,CAAC+C,YAAJ,CAAiBD,UAAjB,CAA6B,CAA7B,CAAgC,CAAhC,CAAmCA,UAAnC,CAA+C,CAA/C,CAAkD,CAAlD,EACA9C,GAAG,CAACgD,qBAAJ,CAA4B,MAA5B,CAEAhD,GAAG,CAACE,SAAJ,CACAuC,KADA,CAEArB,IAAI,CAAC6B,CAAL,CAASP,MAFT,CAGAtB,IAAI,CAAC8B,CAAL,CAASN,MAHT,CAIAxB,IAAI,CAACtB,KAAL,CAAa4C,MAJb,CAKAtB,IAAI,CAACrB,MAAL,CAAc6C,MALd,CAMA,CANA,CAOA,CAPA,CAQAxB,IAAI,CAACtB,KARL,CASAsB,IAAI,CAACrB,MATL,EAYJ,GAAMgC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CACAxC,MAAM,CAAC2D,MAAP,CAAc,SAAAC,IAAI,CAAI,CAClBrB,MAAM,CAACI,aAAP,CAAqBiB,IAArB,EACArB,MAAM,CAACsB,SAAP,CAAmB,UAAM,CACrBC,aAAa,CAACvB,MAAM,CAACG,MAAR,cAAb,CACH,CAFD,CAGH,CALD,EAOA,GAAMoB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,OAAD,CAAUC,QAAV,CAAuB,CACzC,GAAIC,CAAAA,GAAG,CAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,CAAV,CACAC,IAAI,CAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,EAAwB,CAAxB,CADP,CAEAC,IAAI,CAAGC,IAAI,CAACL,GAAG,CAAC,CAAD,CAAJ,CAFX,CAGAM,CAAC,CAAGF,IAAI,CAAC/B,MAHT,CAIAkC,KAAK,CAAG,GAAIC,CAAAA,UAAJ,CAAeF,CAAf,CAJR,CAMA,MAAMA,CAAC,EAAP,CAAU,CACNC,KAAK,CAACD,CAAD,CAAL,CAAWF,IAAI,CAACK,UAAL,CAAgBH,CAAhB,CAAX,CACH,CACD,GAAII,CAAAA,YAAY,CAAG,GAAIC,CAAAA,IAAJ,CAAS,CAACJ,KAAD,CAAT,CAAkBR,QAAlB,CAA4B,CAACa,IAAI,CAACV,IAAN,CAA5B,CAAnB,CACA7C,QAAQ,CAAC,CAACD,KAAK,CAAEsD,YAAR,CAAD,CAAR,CACH,CAZD,CAcC,CArDQ,CAqDN,CAAC7C,aAAD,CArDM,CAAT,CAwDA,GAAMgD,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,GAAIC,CAAAA,QAAQ,CAAG,GAAIxF,CAAAA,QAAJ,EAAf,CAEA;AACAwF,QAAQ,CAACC,MAAT,CAAgB,aAAhB,CAA+B3D,KAA/B,EAEA4D,aAAa,CAACC,GAAd,CAAkB,qBAAlB,CAAyCH,QAAzC,EACA;AACH,CARD,CAWA,mBACA,YAAK,SAAS,CAAC,cAAf,uBACI,cAAM,SAAS,CAAE/C,OAAO,CAACmD,IAAzB,CAA+B,UAAU,KAAzC,CAA0C,QAAQ,CAAEhE,YAAY,CAAC2D,QAAD,CAAhE,wBACI,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,uBACI,eAAO,OAAO,CAAC,aAAf,wBACI,cACA,MAAM,CAAC,SADP,CAEA,SAAS,CAAE9C,OAAO,CAACoD,KAFnB,CAGA,EAAE,CAAC,aAHH,CAIA,QAAQ,CAAElD,YAJV,CAKA,IAAI,CAAC,OALL,CAMA,IAAI,CAAC,MANL,CAOA,GAAG,CAAEhB,QAPL,EADJ,sBASqBmE,OAAO,CAACC,GAAR,CAAYjE,KAAZ,CATrB,cAUI,aAAK,SAAS,CAAC,wBAAf,WACKA,KAAK,GAAKkE,SAAV,cACG,KAAC,MAAD,EAAQ,GAAG,CAAExE,IAAI,EAAIA,IAAI,CAACyE,WAA1B,CAAuC,GAAG,CAAEzE,IAAI,EAAIA,IAAI,CAAC0E,QAAzD,CACI,SAAS,CAAC,mBADd,EADH,cAIK,KAAC,MAAD,EAAQ,GAAG,CAAEpE,KAAb,CAAoB,SAAS,CAAC,mBAA9B,CAAkD,GAAG,CAAC,EAAtD,EALV,cAOI,YAAK,SAAS,CAAC,wBAAf,uBACI,KAAC,UAAD,EAAY,KAAK,CAAC,SAAlB,CAA4B,SAAS,CAAC,MAAtC,uBACI,KAAC,WAAD,EAAa,QAAQ,CAAC,OAAtB,EADJ,EADJ,EAPJ,GAVJ,GADJ,EADJ,cA2BQ,KAAC,SAAD,EACI,GAAG,CAAEA,KADT,CAEI,aAAa,CAAEuB,MAFnB,CAGI,IAAI,CAAEhB,IAHV,CAII,QAAQ,CAAE,kBAAC8D,CAAD,QAAO7D,CAAAA,OAAO,CAAC6D,CAAD,CAAd,EAJd,CAKI,UAAU,CAAE,oBAACA,CAAD,QAAO3D,CAAAA,gBAAgB,CAAC2D,CAAD,CAAvB,EALhB,EA3BR,cA6CI,KAAC,MAAD,EACI,IAAI,CAAC,QADT,CAEI,SAAS,KAFb,CAGI,OAAO,CAAC,WAHZ,CAII,KAAK,CAAC,SAJV,CAKI,SAAS,CAAE1D,OAAO,CAAC2D,MALvB,oBA7CJ,GADJ,EADA,CA4DH","sourcesContent":["import React, { PureComponent } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport { withStyles } from \"@material-ui/styles\";\nimport FormData from \"form-data\";\nimport {Avatar, Grid, IconButton} from \"@material-ui/core\";\n\n\nconst axios = require('axios');\n\nconst tokens = localStorage.tokens;\n\n//  const handleSubmit = (values) => {\n//     let data = new FormData();\n//     data.append(\"image\", values.file);\n//      // data.append('file[]', values.file, values.file.name,);\n//      // data.append('subject', values.subject);\n//     console.log(\"data\", data)\n//     // console.log(\"values\", values.file.name)\n//     const REST_API_URL = `http://127.0.0.1:8000/api/account/`;\n//     axios.post(REST_API_URL, data, {\n//   headers: {\n//     'accept': 'application/json',\n//     'Accept-Language': 'en-US,en;q=0.8',\n//     'Content-Type': `multipart/form-data`,\n//     'Authorization': `Token ${tokens}`,\n//\n//   }\n// })\n//   .then((response) => {\n//       if (response.status===201) {\n//           alert(\"Success\");\n//             // handleCloseTopic()\n//       }\n//       else {\n//           alert(\"error\");\n//           // handleCloseTopic()\n//           // window.location.reload();\n//         throw new Error('Something went wrong');\n//       }\n//   });\n//   }\n\n\n\n\n\n\n\n//\n//\n//\n// const Transition = React.forwardRef(function Transition(props, ref) {\n//   return <Slide direction=\"up\" ref={ref} {...props} />;\n// });\n//\n// const styles = {\n//   dialogPaper: {\n//     minHeight: \"80vh\",\n//     maxHeight: \"80vh\"\n//   }\n// };\n//\n// class AlertDialogSlide extends PureComponent {\n//   state = {\n//     open: false,\n//     src: null,\n//     crop: {\n//       unit: \"%\",\n//       width: 30,\n//       aspect: 16 / 9\n//     }\n//   };\n//\n//   handleClickOpen = () => {\n//     this.setState({ open: true });\n//   };\n//\n//   handleClose = () => {\n//     this.setState({ open: false });\n//   };\n//\n//   onSelectFile = e => {\n//     if (e.target.files && e.target.files.length > 0) {\n//       const reader = new FileReader();\n//       reader.addEventListener(\"load\", () =>\n//         this.setState({ src: reader.result })\n//       );\n//       reader.readAsDataURL(e.target.files[0]);\n//     }\n//   };\n//\n//   // If you setState the crop in here you should return false.\n//   onImageLoaded = image => {\n//     this.imageRef = image;\n//   };\n//\n//\n//   handleSubmit = (values) => {\n//     let data = new FormData();\n//     data.append(\"image\", values.file);\n//      // data.append('file[]', values.file, values.file.name,);\n//      // data.append('subject', values.subject);\n//         console.log(props)\n//\n//     // console.log(values)\n//     console.log(\"data\", data)\n//     // console.log(\"values\", values.file.name)\n//     const REST_API_URL = `http://127.0.0.1:8000/api/account/`;\n//     axios.post(REST_API_URL, data, {\n//   headers: {\n//     'accept': 'application/json',\n//     'Accept-Language': 'en-US,en;q=0.8',\n//     'Content-Type': `multipart/form-data`,\n//     'Authorization': `Token ${tokens}`,\n//\n//   }\n// })\n//   .then((response) => {\n//       if (response.status===201) {\n//           alert(\"Success\");\n//             // handleCloseTopic()\n//       }\n//       else {\n//           alert(\"error\");\n//           // handleCloseTopic()\n//           // window.location.reload();\n//         throw new Error('Something went wrong');\n//       }\n//   });\n//   }\n//   onCropComplete = crop => {\n//     this.makeClientCrop(crop);\n//   };\n//\n//   onCropChange = (crop, percentCrop) => {\n//     // You could also use percentCrop:\n//     // this.setState({ crop: percentCrop });\n//     this.setState({ crop });\n//   };\n//\n//   async makeClientCrop(crop) {\n//     if (this.imageRef && crop.width && crop.height) {\n//       const croppedImageUrl = await this.getCroppedImg(\n//         this.imageRef,\n//         crop,\n//         \"newFile.jpeg\"\n//       );\n//       this.setState({ croppedImageUrl });\n//     }\n//   }\n//\n//   getCroppedImg(image, crop, fileName) {\n//     const canvas = document.createElement(\"canvas\");\n//     const scaleX = image.naturalWidth / image.width;\n//     const scaleY = image.naturalHeight / image.height;\n//     canvas.width = crop.width;\n//     canvas.height = crop.height;\n//     const ctx = canvas.getContext(\"2d\");\n//\n//     ctx.drawImage(\n//       image,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width,\n//       crop.height\n//     );\n//\n//\n//     return new Promise((resolve, reject) => {\n//       canvas.toBlob(blob => {\n//         if (!blob) {\n//           //reject(new Error('Canvas is empty'));\n//           console.error(\"Canvas is empty\");\n//           return;\n//         }\n//         blob.name = fileName;\n//         window.URL.revokeObjectURL(this.fileUrl);\n//         this.fileUrl = window.URL.createObjectURL(blob);\n//         resolve(this.fileUrl);\n//       }, \"image/jpeg\");\n//     });\n//   }\n//\n//\n//\n//   render() {\n//     let fileInput = React.createRef();\n//     const { crop, croppedImageUrl, src } = this.state;\n//     return (\n//       <div>\n//         <Button\n//           variant=\"outlined\"\n//           color=\"primary\"\n//           onClick={this.handleClickOpen}\n//         >\n//           Add Images\n//         </Button>\n//         <Dialog\n//           open={this.state.open}\n//           TransitionComponent={Transition}\n//           keepMounted\n//           onClose={this.TransitionComponenthandleClose}\n//         >\n//\n//           <DialogTitle>{\"Add Images\"}</DialogTitle>\n//           <DialogContent>\n//             <input\n//               type=\"file\"\n//               ref={fileInput}\n//               style={{ display: \"none\" }}\n//               onChange={this.onSelectFile}\n//               multiple\n//             />\n//\n//             {src && (\n//               <ReactCrop\n//                 src={src}\n//                 crop={crop}\n//                 onImageLoaded={this.onImageLoaded}\n//                 onComplete={this.onCropComplete}\n//                 onChange={this.onCropChange}\n//               />\n//             )}\n//             {croppedImageUrl && (\n//               <img\n//                 alt=\"Crop\"\n//                 style={{ maxWidth: \"100%\" }}\n//                 src={croppedImageUrl}\n//               />\n//             )}\n//           </DialogContent>\n//           <DialogActions>\n//             <Button onClick={this.handleClose} color=\"primary\">\n//               close\n//             </Button>\n//             <Button onClick={() => fileInput.current.click()}>\n//               {src === null ? \"Upload Photo\" : \"Change Photo\"}\n//             </Button>\n//             {src !== null ? (\n//\n//               //\n//               <Button    onClick={()=> this.handleSubmit()}  >\n//                 Save Photo\n//               </Button>\n//\n//\n//             //\n//\n//             ) : null}\n//           </DialogActions>\n//         </Dialog>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default AlertDialogSlide;\n\n\n\n\nfunction getResizedCanvas(canvas, newWidth, newHeight) {\n  const tmpCanvas = document.createElement(\"canvas\");\n  tmpCanvas.width = newWidth;\n  tmpCanvas.height = newHeight;\n\n  const ctx = tmpCanvas.getContext(\"2d\");\n  ctx.drawImage(\n    canvas,\n    0,\n    0,\n    canvas.width,\n    canvas.height,\n    0,\n    0,\n    newWidth,\n    newHeight\n  );\n\n  return tmpCanvas;\n}\n\n\nfunction PhotoCamera(props: { fontSize: string }) {\n  return null;\n}\n\nexport default function ProfilePicEdit() {\n\n    const [{user}, dispatch] = useStateValue()\n\n    const { register, handleSubmit } = useForm();\n\n    const [upImg, setUpImg] = useState();\n    // const [image, setImage] = useState(null);\n    const imgRef = useRef(null);\n    const previewCanvasRef = useRef(null);\n    const [crop, setCrop] = useState({ unit: \"%\", width: 30, aspect: 1 / 1 });\n    const [completedCrop, setCompletedCrop] = useState(null);\n\n    const classes = useStyles();\n\n    const onSelectFile = (e) => {\n        if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => setUpImg(reader.result));\n        reader.readAsDataURL(e.target.files[0]);\n        // setImage(\n        //   {image: e.target.files[0]}\n        //   )\n        }\n    };\n\n    const onLoad = useCallback((img) => {\n        imgRef.current = img;\n    }, []);\n\n    useEffect(() => {\n        if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n        return;\n        }\n\n        const image = imgRef.current;\n        const canvas = previewCanvasRef.current;\n        const crop = completedCrop;\n\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        const ctx = canvas.getContext(\"2d\");\n\n        canvas.width = crop.width * pixelRatio;\n        canvas.height = crop.height * pixelRatio;\n\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        ctx.imageSmoothingQuality = \"high\";\n\n        ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        crop.width,\n        crop.height\n        );\n\n    const reader = new FileReader()\n    canvas.toBlob(blob => {\n        reader.readAsDataURL(blob)\n        reader.onloadend = () => {\n            dataURLtoFile(reader.result, `sample.jpg`)\n        }\n    })\n\n    const dataURLtoFile = (dataurl, filename) => {\n        let arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n        while(n--){\n            u8arr[n] = bstr.charCodeAt(n);\n        }\n        let croppedImage = new File([u8arr], filename, {type:mime});\n        setUpImg({upImg: croppedImage })\n    }\n\n    }, [completedCrop]);\n\n\n    const onSubmit = () => {\n        let formData = new FormData();\n\n        // console.log(upImg)\n        formData.append('profile_pic', upImg);\n\n        axiosInstance.put('api/profile/update/', formData)\n        // window.location.reload();\n    }\n\n\n    return (\n    <div className=\"imagecropper\">\n        <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}>\n            <Grid item xs={6}>\n                <label htmlFor=\"profile-pic\">\n                    <input\n                    accept=\"image/*\"\n                    className={classes.input}\n                    id=\"profile-pic\"\n                    onChange={onSelectFile}\n                    name=\"image\"\n                    type=\"file\"\n                    ref={register}\n                />                  {console.log(upImg)}\n                    <div className=\"profile_pic__edit_main\">\n                        {upImg === undefined ?\n                            <Avatar src={user && user.profile_pic} alt={user && user.username}\n                                className=\"profile__pic_edit\"\n                            />\n                            : <Avatar src={upImg} className=\"profile__pic_edit\" alt=\"\" />\n                        }\n                        <div className=\"profile_pic__edit_icon\">\n                            <IconButton color=\"primary\" component=\"span\">\n                                <PhotoCamera fontSize=\"large\" />\n                            </IconButton>\n                        </div>\n                    </div>\n                </label>\n            </Grid>\n                <ReactCrop\n                    src={upImg}\n                    onImageLoaded={onLoad}\n                    crop={crop}\n                    onChange={(c) => setCrop(c)}\n                    onComplete={(c) => setCompletedCrop(c)}\n                />\n            {/* <div>\n                <canvas\n                ref={previewCanvasRef}\n                // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n                style={{\n                    width: Math.round(completedCrop?.width ?? 0),\n                    height: Math.round(completedCrop?.height ?? 0)\n                }}\n                />\n            </div> */}\n\n            <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n            >\n                Update\n            </Button>\n    </form>\n    </div>\n  );\n\n}\n"]},"metadata":{},"sourceType":"module"}