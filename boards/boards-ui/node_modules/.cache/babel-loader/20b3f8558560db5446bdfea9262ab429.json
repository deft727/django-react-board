{"ast":null,"code":"import React from \"react\";\nimport { logger, invariant } from \"@rpldy/shared\";\nimport { registerUploadyContextVersion } from \"./uploadyVersion\";\nvar UploadyContext = /*#__PURE__*/React.createContext(null);\nvar NO_INPUT_ERROR_MSG = \"Uploady - Context. File input isn't available\";\nexport var createContextApi = function createContextApi(uploader, internalInputRef) {\n  var fileInputRef, showFileUploadOptions;\n  var isUsingExternalInput = false;\n\n  if (internalInputRef) {\n    fileInputRef = internalInputRef;\n  } else {\n    logger.debugLog(\"Uploady context - didn't receive input field ref - waiting for external ref\");\n  }\n\n  var getInputField = function getInputField() {\n    var _fileInputRef;\n\n    return (_fileInputRef = fileInputRef) === null || _fileInputRef === void 0 ? void 0 : _fileInputRef.current;\n  };\n\n  var getInternalFileInput = function getInternalFileInput() {\n    //retrieving the internal file input in userland means Uploady considers the input as custom from now on\n    if (fileInputRef) {\n      isUsingExternalInput = true;\n    }\n\n    return fileInputRef;\n  };\n\n  var getIsUsingExternalInput = function getIsUsingExternalInput() {\n    return isUsingExternalInput;\n  };\n\n  var onFileInputChange = function onFileInputChange() {\n    var input = getInputField();\n    invariant(input, NO_INPUT_ERROR_MSG);\n    input.removeEventListener(\"change\", onFileInputChange);\n    var addOptions = showFileUploadOptions;\n    showFileUploadOptions = null;\n    upload(input.files, addOptions);\n  };\n\n  var upload = function upload(files, addOptions) {\n    uploader.add(files, addOptions);\n  }; //We register the version on the global object to be able to warn devs when they're using packages from different uploady versions\n  //causing the context not to be available\n\n\n  registerUploadyContextVersion();\n  return {\n    hasUploader: function hasUploader() {\n      return !!uploader;\n    },\n    getInternalFileInput: getInternalFileInput,\n    setExternalFileInput: function setExternalFileInput(extRef) {\n      isUsingExternalInput = true;\n      fileInputRef = extRef;\n    },\n    getIsUsingExternalInput: getIsUsingExternalInput,\n    showFileUpload: function showFileUpload(addOptions) {\n      var input = getInputField();\n      invariant(input, NO_INPUT_ERROR_MSG); //allow components like upload button to override options\n\n      showFileUploadOptions = addOptions;\n      input.removeEventListener(\"change\", onFileInputChange);\n      input.addEventListener(\"change\", onFileInputChange); //clear the input value so same file can be uploaded again\n\n      input.value = \"\";\n      input.click();\n    },\n    upload: upload,\n    processPending: function processPending(uploadOptions) {\n      uploader.upload(uploadOptions);\n    },\n    clearPending: function clearPending() {\n      uploader.clearPending();\n    },\n    setOptions: function setOptions(options) {\n      uploader.update(options);\n    },\n    getOptions: function getOptions() {\n      return uploader.getOptions();\n    },\n    getExtension: function getExtension(name) {\n      return uploader.getExtension(name);\n    },\n    abort: function abort(itemId) {\n      uploader.abort(itemId);\n    },\n    abortBatch: function abortBatch(batchId) {\n      uploader.abortBatch(batchId);\n    },\n    on: function on(name, cb) {\n      return uploader.on(name, cb);\n    },\n    once: function once(name, cb) {\n      return uploader.once(name, cb);\n    },\n    off: function off(name, cb) {\n      return uploader.off(name, cb);\n    }\n  };\n};\nexport default UploadyContext;","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/node_modules/@rpldy/shared-ui/lib/esm/UploadyContext.js"],"names":["React","logger","invariant","registerUploadyContextVersion","UploadyContext","createContext","NO_INPUT_ERROR_MSG","createContextApi","uploader","internalInputRef","fileInputRef","showFileUploadOptions","isUsingExternalInput","debugLog","getInputField","_fileInputRef","current","getInternalFileInput","getIsUsingExternalInput","onFileInputChange","input","removeEventListener","addOptions","upload","files","add","hasUploader","setExternalFileInput","extRef","showFileUpload","addEventListener","value","click","processPending","uploadOptions","clearPending","setOptions","options","update","getOptions","getExtension","name","abort","itemId","abortBatch","batchId","on","cb","once","off"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { logger, invariant } from \"@rpldy/shared\";\nimport { registerUploadyContextVersion } from \"./uploadyVersion\";\nconst UploadyContext = /*#__PURE__*/React.createContext(null);\nconst NO_INPUT_ERROR_MSG = \"Uploady - Context. File input isn't available\";\nexport const createContextApi = (uploader, internalInputRef) => {\n  let fileInputRef, showFileUploadOptions;\n  let isUsingExternalInput = false;\n\n  if (internalInputRef) {\n    fileInputRef = internalInputRef;\n  } else {\n    logger.debugLog(\"Uploady context - didn't receive input field ref - waiting for external ref\");\n  }\n\n  const getInputField = () => {\n    var _fileInputRef;\n\n    return (_fileInputRef = fileInputRef) === null || _fileInputRef === void 0 ? void 0 : _fileInputRef.current;\n  };\n\n  const getInternalFileInput = () => {\n    //retrieving the internal file input in userland means Uploady considers the input as custom from now on\n    if (fileInputRef) {\n      isUsingExternalInput = true;\n    }\n\n    return fileInputRef;\n  };\n\n  const getIsUsingExternalInput = () => isUsingExternalInput;\n\n  const onFileInputChange = () => {\n    const input = getInputField();\n    invariant(input, NO_INPUT_ERROR_MSG);\n    input.removeEventListener(\"change\", onFileInputChange);\n    const addOptions = showFileUploadOptions;\n    showFileUploadOptions = null;\n    upload(input.files, addOptions);\n  };\n\n  const upload = (files, addOptions) => {\n    uploader.add(files, addOptions);\n  };\n\n  //We register the version on the global object to be able to warn devs when they're using packages from different uploady versions\n  //causing the context not to be available\n  registerUploadyContextVersion();\n  return {\n    hasUploader: () => !!uploader,\n    getInternalFileInput,\n    setExternalFileInput: extRef => {\n      isUsingExternalInput = true;\n      fileInputRef = extRef;\n    },\n    getIsUsingExternalInput,\n    showFileUpload: addOptions => {\n      const input = getInputField();\n      invariant(input, NO_INPUT_ERROR_MSG); //allow components like upload button to override options\n\n      showFileUploadOptions = addOptions;\n      input.removeEventListener(\"change\", onFileInputChange);\n      input.addEventListener(\"change\", onFileInputChange); //clear the input value so same file can be uploaded again\n\n      input.value = \"\";\n      input.click();\n    },\n    upload,\n    processPending: uploadOptions => {\n      uploader.upload(uploadOptions);\n    },\n    clearPending: () => {\n      uploader.clearPending();\n    },\n    setOptions: options => {\n      uploader.update(options);\n    },\n    getOptions: () => {\n      return uploader.getOptions();\n    },\n    getExtension: name => {\n      return uploader.getExtension(name);\n    },\n    abort: itemId => {\n      uploader.abort(itemId);\n    },\n    abortBatch: batchId => {\n      uploader.abortBatch(batchId);\n    },\n    on: (name, cb) => {\n      return uploader.on(name, cb);\n    },\n    once: (name, cb) => {\n      return uploader.once(name, cb);\n    },\n    off: (name, cb) => {\n      return uploader.off(name, cb);\n    }\n  };\n};\nexport default UploadyContext;"]},"metadata":{},"sourceType":"module"}