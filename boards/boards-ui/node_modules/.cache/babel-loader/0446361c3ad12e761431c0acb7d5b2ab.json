{"ast":null,"code":"var getPropsExtractor = function getPropsExtractor(prop) {\n  var props = [].concat(prop);\n  return function (arr) {\n    return arr.map(function (i) {\n      return props.map(function (p) {\n        return i[p];\n      }).join();\n    });\n  };\n};\n/*\nstringifies props together - will return true for same type of value (ex: function)\neven if refs are different\n */\n\n\nvar isSamePropInArrays = function isSamePropInArrays(arr1, arr2, prop) {\n  var diff = true;\n  var propsExtractor = getPropsExtractor(prop);\n\n  if (arr1 && arr2 && arr1.length === arr2.length) {\n    var props1 = propsExtractor(arr1),\n        props2 = propsExtractor(arr2);\n    diff = !!props1.find(function (p, i) {\n      return p !== props2[i];\n    });\n  }\n\n  return !diff;\n};\n\nexport default isSamePropInArrays;","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/node_modules/@rpldy/shared/lib/esm/utils/isSamePropInArrays.js"],"names":["getPropsExtractor","prop","props","concat","arr","map","i","p","join","isSamePropInArrays","arr1","arr2","diff","propsExtractor","length","props1","props2","find"],"mappings":"AAAA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,IAAI,EAAI;AAChC,MAAMC,KAAK,GAAG,GAAGC,MAAH,CAAUF,IAAV,CAAd;AACA,SAAO,UAAAG,GAAG;AAAA,WAAIA,GAAG,CAACC,GAAJ,CAAQ,UAAAC,CAAC;AAAA,aAAIJ,KAAK,CAACG,GAAN,CAAU,UAAAE,CAAC;AAAA,eAAID,CAAC,CAACC,CAAD,CAAL;AAAA,OAAX,EAAqBC,IAArB,EAAJ;AAAA,KAAT,CAAJ;AAAA,GAAV;AACD,CAHD;AAIA;AACA;AACA;AACA;;;AAGA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAOC,IAAP,EAAaV,IAAb,EAAsB;AAC/C,MAAIW,IAAI,GAAG,IAAX;AACA,MAAMC,cAAc,GAAGb,iBAAiB,CAACC,IAAD,CAAxC;;AAEA,MAAIS,IAAI,IAAIC,IAAR,IAAgBD,IAAI,CAACI,MAAL,KAAgBH,IAAI,CAACG,MAAzC,EAAiD;AAC/C,QAAMC,MAAM,GAAGF,cAAc,CAACH,IAAD,CAA7B;AAAA,QACMM,MAAM,GAAGH,cAAc,CAACF,IAAD,CAD7B;AAEAC,IAAAA,IAAI,GAAG,CAAC,CAACG,MAAM,CAACE,IAAP,CAAY,UAACV,CAAD,EAAID,CAAJ;AAAA,aAAUC,CAAC,KAAKS,MAAM,CAACV,CAAD,CAAtB;AAAA,KAAZ,CAAT;AACD;;AAED,SAAO,CAACM,IAAR;AACD,CAXD;;AAaA,eAAeH,kBAAf","sourcesContent":["const getPropsExtractor = prop => {\n  const props = [].concat(prop);\n  return arr => arr.map(i => props.map(p => i[p]).join());\n};\n/*\nstringifies props together - will return true for same type of value (ex: function)\neven if refs are different\n */\n\n\nconst isSamePropInArrays = (arr1, arr2, prop) => {\n  let diff = true;\n  const propsExtractor = getPropsExtractor(prop);\n\n  if (arr1 && arr2 && arr1.length === arr2.length) {\n    const props1 = propsExtractor(arr1),\n          props2 = propsExtractor(arr2);\n    diff = !!props1.find((p, i) => p !== props2[i]);\n  }\n\n  return !diff;\n};\n\nexport default isSamePropInArrays;"]},"metadata":{},"sourceType":"module"}