{"ast":null,"code":"import _regeneratorRuntime from\"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/user/Desktop/react_board/boards/boards-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var getImageFromUrl=function getImageFromUrl(url){return new Promise(function(resolve,reject){var image=new Image();image.addEventListener(\"load\",function(){return resolve(image);});image.addEventListener(\"error\",reject);image.src=url;});};var getBlobFromCanvas=function getBlobFromCanvas(canvas,file){return new Promise(function(resolve,reject){canvas.toBlob(function(blob){if(blob){blob.name=file.name;blob.lastModified=file.lastModified;resolve(blob);}else{reject(new Error(\"Canvas is empty\"));}},file.type);//\"image/jpeg\");\n});};export default/*#__PURE__*/(function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageUrl,file,crop){var image,canvas,scaleX,scaleY,ctx;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getImageFromUrl(imageUrl);case 2:image=_context.sent;canvas=document.createElement(\"canvas\");scaleX=image.naturalWidth/image.width;scaleY=image.naturalHeight/image.height;ctx=canvas.getContext(\"2d\");canvas.width=crop.width;canvas.height=crop.height;ctx.drawImage(image,crop.x*scaleX,crop.y*scaleY,crop.width*scaleX,crop.height*scaleY,0,0,crop.width,crop.height);_context.next=12;return getBlobFromCanvas(canvas,file);case 12:return _context.abrupt(\"return\",_context.sent);case 13:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2,_x3){return _ref.apply(this,arguments);};})();","map":{"version":3,"sources":["/home/user/Desktop/react_board/boards/boards-ui/src/components/account/crop.js"],"names":["getImageFromUrl","url","Promise","resolve","reject","image","Image","addEventListener","src","getBlobFromCanvas","canvas","file","toBlob","blob","name","lastModified","Error","type","imageUrl","crop","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","drawImage","x","y"],"mappings":"iQAAA,GAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,GAAG,QACzB,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC/B,GAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,EAAd,CACAD,KAAK,CAACE,gBAAN,CAAuB,MAAvB,CAA+B,iBAAMJ,CAAAA,OAAO,CAACE,KAAD,CAAb,EAA/B,EACAA,KAAK,CAACE,gBAAN,CAAuB,OAAvB,CAAgCH,MAAhC,EACAC,KAAK,CAACG,GAAN,CAAYP,GAAZ,CACD,CALD,CADyB,EAA3B,CAQA,GAAMQ,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAASC,IAAT,QACxB,IAAIT,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC/BM,MAAM,CAACE,MAAP,CAAc,SAAAC,IAAI,CAAI,CACpB,GAAIA,IAAJ,CAAU,CACRA,IAAI,CAACC,IAAL,CAAYH,IAAI,CAACG,IAAjB,CACAD,IAAI,CAACE,YAAL,CAAoBJ,IAAI,CAACI,YAAzB,CACAZ,OAAO,CAACU,IAAD,CAAP,CACD,CAJD,IAIO,CACLT,MAAM,CAAC,GAAIY,CAAAA,KAAJ,CAAU,iBAAV,CAAD,CAAN,CACD,CACF,CARD,CAQGL,IAAI,CAACM,IARR,EAQe;AAChB,CAVD,CADwB,EAA1B,CAaA,wGAAe,iBAAOC,QAAP,CAAiBP,IAAjB,CAAuBQ,IAAvB,2KACOnB,CAAAA,eAAe,CAACkB,QAAD,CADtB,QACPb,KADO,eAEXK,MAFW,CAEFU,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAFE,CAGXC,MAHW,CAGFjB,KAAK,CAACkB,YAAN,CAAqBlB,KAAK,CAACmB,KAHzB,CAIXC,MAJW,CAIFpB,KAAK,CAACqB,aAAN,CAAsBrB,KAAK,CAACsB,MAJ1B,CAKXC,GALW,CAKLlB,MAAM,CAACmB,UAAP,CAAkB,IAAlB,CALK,CAObnB,MAAM,CAACc,KAAP,CAAeL,IAAI,CAACK,KAApB,CACAd,MAAM,CAACiB,MAAP,CAAgBR,IAAI,CAACQ,MAArB,CAEAC,GAAG,CAACE,SAAJ,CACEzB,KADF,CAEEc,IAAI,CAACY,CAAL,CAAST,MAFX,CAGEH,IAAI,CAACa,CAAL,CAASP,MAHX,CAIEN,IAAI,CAACK,KAAL,CAAaF,MAJf,CAKEH,IAAI,CAACQ,MAAL,CAAcF,MALhB,CAME,CANF,CAOE,CAPF,CAQEN,IAAI,CAACK,KARP,CASEL,IAAI,CAACQ,MATP,EAVa,uBAsBAlB,CAAAA,iBAAiB,CAACC,MAAD,CAASC,IAAT,CAtBjB,+GAAf","sourcesContent":["const getImageFromUrl = url =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", reject);\n    image.src = url;\n  });\n\nconst getBlobFromCanvas = (canvas, file) =>\n  new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      if (blob) {\n        blob.name = file.name;\n        blob.lastModified = file.lastModified;\n        resolve(blob);\n      } else {\n        reject(new Error(\"Canvas is empty\"));\n      }\n    }, file.type); //\"image/jpeg\");\n  });\n\nexport default async (imageUrl, file, crop) => {\n  const image = await getImageFromUrl(imageUrl),\n    canvas = document.createElement(\"canvas\"),\n    scaleX = image.naturalWidth / image.width,\n    scaleY = image.naturalHeight / image.height,\n    ctx = canvas.getContext(\"2d\");\n\n  canvas.width = crop.width;\n  canvas.height = crop.height;\n\n  ctx.drawImage(\n    image,\n    crop.x * scaleX,\n    crop.y * scaleY,\n    crop.width * scaleX,\n    crop.height * scaleY,\n    0,\n    0,\n    crop.width,\n    crop.height\n  );\n\n  return await getBlobFromCanvas(canvas, file);\n};\n"]},"metadata":{},"sourceType":"module"}