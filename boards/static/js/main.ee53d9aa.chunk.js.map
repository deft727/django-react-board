{"version":3,"sources":["components/table/Table.js","components/board_detail/BoardDetail.js","App.js","reportWebVitals.js","index.js"],"names":["Table","useState","boards","SetBoards","useEffect","axios","method","url","then","response","data","className","id","map","b","to","pathname","froDashboard","name","topics_count","posts_count","last_post","message","href","author","BoardDetail","match","board","Setboard","topics","SetTopic","params","t","subject","starter","username","replies","views","last_updated","App","path","exect","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA+EeA,MAxEf,WACE,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAYA,OAXCC,qBAAU,WAELC,IAAM,CACFC,OAAQ,MACRC,IAAI,qCACLC,MAAK,SAAAC,GACJN,EAAUM,EAASC,WAExB,IAIH,qBAAKC,UAAU,MAAf,SAEC,wBAAOA,UAAU,2BAA2BC,GAAG,cAA/C,UACG,uBAAOD,UAAU,aAAjB,SACA,+BACE,uCACA,uCACA,wCACA,2CAEA,2CAIFT,EAAOW,KAAI,SAAAC,GAAC,OACZ,uBAAOH,UAAU,gBAAjB,SAEA,+BACE,6BACI,uBAAOA,UAAU,qBAAjB,SAEI,cAAC,IAAD,CAAMA,UAAU,eAAeI,GAAI,CAACC,SAAS,UAAD,OAAWF,EAAEF,GAAb,KAAoBK,cAAa,GAA7E,SAAuFH,EAAEI,WAIjG,oBAAIP,UAAU,eAAd,SACGG,EAAEK,eAEL,oBAAIR,UAAU,eAAd,SACGG,EAAEM,cAGL,oBAAIT,UAAU,eAAd,SAEE,kCACKG,EAAEO,UAAUC,QADjB,IAC0B,uBACxB,oBAAGC,KAAK,GAAR,gBACMT,EAAEO,UAAUG,eAMtB,2BA5BoCV,EAAEF,a,OCwBjCa,MAzDf,YAAiC,IAAVC,EAAS,EAATA,MAEnB,EAA0BzB,mBAAS,IAAnC,mBAAO0B,EAAP,KAAcC,EAAd,KACA,EAA2B3B,mBAAS,IAApC,mBAAO4B,EAAP,KAAeC,EAAf,KACMlB,EAAKc,EAAMK,OAAOnB,GAaxB,OAXAR,qBAAU,WAENC,IAAM,CACFC,OAAQ,MACRC,IAAI,mCAAD,OAAqCK,EAArC,OACJJ,MAAK,SAAAC,GACJmB,EAASnB,EAASC,MAClBoB,EAASrB,EAASC,KAAKmB,aAE5B,CAACjB,IAGR,wBAAOD,UAAU,2BAAjB,UACI,4BAAIgB,EAAMT,OACZ,uBAAOP,UAAU,gBAAjB,SACE,+BACE,uCACA,yCACA,yCACA,uCACA,kDAGMkB,EAAOhB,KAAI,SAAAmB,GAAC,OACtB,gCACE,qBAAKrB,UAAU,gBAAf,SACE,+BACE,+BACE,mBAAGA,UAAU,OAAb,SACE,mBAAGY,KAAK,GAAR,SAAaS,EAAEC,YAEjB,uBAAOtB,UAAU,aAAjB,uBAIF,oBAAIA,UAAU,eAAd,SAA+BqB,EAAEE,QAAQC,WACzC,oBAAIxB,UAAU,eAAd,SAA+BqB,EAAEI,UACjC,oBAAIzB,UAAU,eAAd,SAA+BqB,EAAEK,QACjC,oBAAI1B,UAAU,eAAd,SAA+BqB,EAAEM,qBAd1BN,EAAEpB,WCXF2B,MAdf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACH,eAAC,IAAD,WACG,cAAE,EAAF,IACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAO6B,KAAK,cAAcC,OAAK,EAACC,UAAWjB,YCFpCkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee53d9aa.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Link} from 'react-router-dom';\n\nimport axios from 'axios';\n\n\nfunction Table() {\n  const [boards, SetBoards] = useState([])\n   useEffect(() => {\n\n        axios({\n            method: \"GET\",\n            url: `http://127.0.0.1:8000/api/board/`\n        }).then(response => {\n            SetBoards(response.data)\n        })\n    }, [])\n\n\n  return (\n    <div className=\"App\">\n\n     <table className=\"table infinite-container\" id=\"board-table\">\n        <thead className=\"thead-dark\">\n        <tr>\n          <th>Board</th>\n          <th>Posts</th>\n          <th>Topics</th>\n          <th>Last Post</th>\n\n          <th>Edit</th>\n\n        </tr>\n        </thead>\n       {boards.map(b => (\n        <tbody className=\"infinite-item\" key={b.id}>\n\n        <tr>\n          <td>\n              <small className=\"text-muted d-block\">\n\n                  <Link className=\"link-success\" to={{pathname:`/board/${b.id}/`, froDashboard:false }}>{b.name}</Link>\n\n              </small>\n          </td>\n          <td className=\"align-middle\">\n            {b.topics_count}\n          </td>\n          <td className=\"align-middle\">\n            {b.posts_count}\n          </td>\n\n          <td className=\"align-middle\">\n\n            <small>\n                {b.last_post.message} <br/>\n              <a href=\"\">\n                By {b.last_post.author}\n              </a>\n            </small>\n          </td>\n\n\n          <td>\n\n          </td>\n\n        </tr>\n\n        </tbody>\n           ))}\n      </table>\n\n\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\n\nfunction BoardDetail({ match }) {\n\n    const [board, Setboard] = useState({})\n    const [topics, SetTopic] = useState([])\n    const id = match.params.id\n\n    useEffect(() => {\n\n        axios({\n            method: \"GET\",\n            url: `http://127.0.0.1:8000/api/board/${id}/`\n        }).then(response => {\n            Setboard(response.data)\n            SetTopic(response.data.topics)\n        })\n    }, [id])\n\n    return(\n<table className=\"table table-striped mb-4\">\n    <p>{board.name}</p>\n  <thead className=\"thead-inverse\">\n    <tr>\n      <th>Topic</th>\n      <th>Starter</th>\n      <th>Replies</th>\n      <th>Views</th>\n      <th>Last Update</th>\n    </tr>\n  </thead>\n           {topics.map(t => (\n  <tbody  key={t.id}>\n    <div className=\"infinite-item\">\n      <tr>\n        <td>\n          <p className=\"mb-0\">\n            <a href=\"\">{ t.subject }</a>\n          </p>\n          <small className=\"text-muted\">\n            Pages:\n          </small>\n        </td>\n        <td className=\"align-middle\">{ t.starter.username }</td>\n        <td className=\"align-middle\">{ t.replies }</td>\n        <td className=\"align-middle\">{ t.views }</td>\n        <td className=\"align-middle\">{ t.last_updated }</td>\n      </tr>\n\n    </div>\n\n  </tbody>\n               ))}\n</table>\n\n\n    )\n}\n\nexport default BoardDetail;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Table from \"./components/table/Table\";\nimport {BrowserRouter as Router,Switch,Route} from \"react-router-dom\";\nimport BoardDetail from \"./components/board_detail/BoardDetail\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n <Router>\n    < Table />\n      <Switch>\n        <Route path=\"/board/:id/\" exect component={BoardDetail} />\n      </Switch>\n</Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}